"""
Shadow Roll Discord Bot - Main Entry Point
Optimized for external hosting platforms
"""
import asyncio
import logging
import os
import sys
from pathlib import Path
from core.bot import ShadowRollBot
from core.config import BotConfig

def setup_logging():
    """Configure logging for external hosting"""
    log_level = os.getenv('LOG_LEVEL', 'INFO').upper()
    
    # Cr√©er le dossier de logs s'il n'existe pas
    Path('logs').mkdir(exist_ok=True)
    
    # Configuration du logging optimis√©e
    logging.basicConfig(
        level=getattr(logging, log_level, logging.INFO),
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('logs/bot.log'),
            logging.StreamHandler(sys.stdout)
        ]
    )
    
    return logging.getLogger('shadow_roll_main')

def validate_environment():
    """Valide les variables d'environnement requises"""
    logger = logging.getLogger('shadow_roll_main')
    
    required_vars = ['DISCORD_TOKEN']
    optional_vars = ['DISCORD_CLIENT_ID', 'LOG_LEVEL', 'DATABASE_PATH']
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        logger.error(f"Variables d'environnement manquantes: {', '.join(missing_vars)}")
        logger.error("Consultez le fichier .env.example pour la configuration")
        sys.exit(1)
    
    logger.info("‚úÖ Variables d'environnement valid√©es")
    
    # Afficher les variables optionnelles configur√©es
    for var in optional_vars:
        value = os.getenv(var)
        if value:
            logger.info(f"  {var}: {value}")

async def main():
    """Main function to run the Shadow Roll bot"""
    
    # Configuration du logging
    logger = setup_logging()
    
    logger.info("üöÄ D√©marrage du Shadow Roll Bot v2.0...")
    logger.info("üåü Bot optimis√© pour l'h√©bergement externe")
    
    # Validation de l'environnement
    validate_environment()
    
    # Validation de la configuration
    if not BotConfig.validate_config():
        logger.error("Configuration validation failed!")
        sys.exit(1)
    
    # R√©cup√©ration du token
    token = BotConfig.DISCORD_TOKEN
    
    # Cr√©er et configurer le bot
    bot = ShadowRollBot()
    
    try:
        logger.info("üîå Connexion au gateway Discord...")
        async with bot:
            await bot.start(token)
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Bot arr√™t√© par l'utilisateur")
    except Exception as e:
        logger.error(f"üí• Erreur critique: {e}")
        logger.error("üìã Red√©marrage automatique en cours...")
        # Pour l'h√©bergement externe, on re-lance le bot apr√®s une pause
        await asyncio.sleep(5)
        await main()  # Relancer le bot
    finally:
        if bot:
            logger.info("üîê Connexion ferm√©e proprement")

if __name__ == "__main__":
    # Gestion des signaux pour l'h√©bergement externe
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.getLogger('shadow_roll_main').info("‚èπÔ∏è Arr√™t du bot")
    except Exception as e:
        logging.getLogger('shadow_roll_main').error(f"üí• Erreur fatale: {e}")
        sys.exit(1)