"""
Shadow Roll Bot - Shop System Complet et Fonctionnel
Syst√®me de boutique enti√®rement repens√© avec gestion d'erreurs robuste
"""

import discord
from discord.ext import commands
import asyncio
import logging
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta
import json
from core.config import BotConfig

logger = logging.getLogger(__name__)

# Fonction de style locale pour √©viter les erreurs d'import
def apply_font_style(text, style):
    """Fonction de fallback pour le style de texte"""
    return text

# Fallback pour style_main_title et autres fonctions de style
def style_main_title():
    return "üåë ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê„Äî S H A D O W   R O L L „Äï‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üåë"

def style_section(text, emoji=""):
    return f"{emoji} ‚ïê‚ïê‚ïê„Äî {text} „Äï‚ïê‚ïê‚ïê {emoji}"

def style_bold(text):
    return f"**{text}**"

class ShopDatabase:
    """Gestionnaire de base de donn√©es pour la boutique"""
    
    def __init__(self, bot):
        self.bot = bot
        self.db = bot.db.db
    
    async def initialize_shop_tables(self):
        """Initialiser toutes les tables n√©cessaires pour la boutique"""
        try:
            # Table des articles de boutique (utilise la table corrig√©e)
            await self.db.execute('''
                CREATE TABLE IF NOT EXISTS shop_items_fixed (
                    id INTEGER PRIMARY KEY,
                    name TEXT NOT NULL,
                    description TEXT,
                    price INTEGER NOT NULL,
                    category TEXT NOT NULL,
                    effect_type TEXT,
                    effect_value TEXT,
                    duration INTEGER DEFAULT 0,
                    is_active BOOLEAN DEFAULT 1,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # Table des achats de joueurs
            await self.db.execute('''
                CREATE TABLE IF NOT EXISTS player_purchases_fixed (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    item_id INTEGER NOT NULL,
                    quantity INTEGER DEFAULT 1,
                    purchase_price INTEGER NOT NULL,
                    purchased_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # Table des potions du joueur
            await self.db.execute('''
                CREATE TABLE IF NOT EXISTS player_potions_fixed (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    potion_name TEXT NOT NULL,
                    effect_type TEXT NOT NULL,
                    duration_minutes INTEGER DEFAULT 60,
                    quantity INTEGER DEFAULT 1,
                    is_active BOOLEAN DEFAULT 1,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # Table des buffs temporaires
            await self.db.execute('''
                CREATE TABLE IF NOT EXISTS temporary_buffs_fixed (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    buff_type TEXT NOT NULL,
                    buff_value REAL DEFAULT 1.0,
                    expires_at INTEGER NOT NULL,
                    is_active BOOLEAN DEFAULT 1,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # Table des invocations gratuites
            await self.db.execute('''
                CREATE TABLE IF NOT EXISTS free_rolls_fixed (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    rolls_remaining INTEGER DEFAULT 0,
                    granted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # Table des garanties de raret√©
            await self.db.execute('''
                CREATE TABLE IF NOT EXISTS guaranteed_rarities_fixed (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    rarity TEXT NOT NULL,
                    uses_remaining INTEGER DEFAULT 1,
                    granted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            await self.db.commit()
            logger.info("Tables de la boutique initialis√©es avec succ√®s")
            
        except Exception as e:
            logger.error(f"Erreur lors de l'initialisation des tables: {e}")
    
    async def add_default_shop_items(self):
        """Ajouter les articles par d√©faut √† la boutique"""
        try:
            # V√©rifier si des articles existent d√©j√†
            cursor = await self.db.execute("SELECT COUNT(*) FROM shop_items_fixed")
            count = (await cursor.fetchone())[0]
            
            if count > 0:
                logger.info("Articles de boutique d√©j√† pr√©sents")
                return
            
            # Articles par d√©faut
            default_items = [
                (1, "üß™ Potion de Chance", "Augmente les chances de raret√© pendant 1h", 1500, "potion", "luck_boost", "1.5", 3600),
                (2, "ü™ô Multiplicateur Pi√®ces", "Double les gains de pi√®ces pendant 1h", 2000, "boost", "coin_multiplier", "2.0", 3600),
                (3, "‚ö° Reset Cooldown", "Supprime tous les cooldowns actifs", 1000, "utility", "cooldown_reset", "instant", 0),
                (4, "üé≤ Pack 5 Invocations", "Accorde 5 invocations gratuites", 3000, "pack", "free_rolls", "5", 0),
                (5, "üîÆ Garantie √âpique", "Prochaine invocation garantie Epic+", 4000, "guarantee", "epic_guarantee", "Epic", 0),
                (6, "üíé Garantie L√©gendaire", "Prochaine invocation garantie Legendary+", 7500, "guarantee", "legendary_guarantee", "Legendary", 0),
                (7, "üåü Mega Pack", "10 invocations + bonus chance", 8000, "pack", "mega_pack", "10", 0),
                (8, "üî• Boost Craft", "R√©duit exigences craft de 50%", 5000, "boost", "craft_discount", "0.5", 7200)
            ]
            
            for item in default_items:
                await self.db.execute('''
                    INSERT OR IGNORE INTO shop_items_fixed 
                    (id, name, description, price, category, effect_type, effect_value, duration)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                ''', item)
            
            await self.db.commit()
            logger.info("Articles par d√©faut ajout√©s √† la boutique")
            
        except Exception as e:
            logger.error(f"Erreur lors de l'ajout des articles par d√©faut: {e}")
    
    async def get_shop_items(self) -> List[Dict]:
        """R√©cup√©rer tous les articles actifs de la boutique"""
        try:
            cursor = await self.db.execute('''
                SELECT id, name, description, price, category, effect_type, effect_value, duration
                FROM shop_items_fixed 
                WHERE is_active = 1 
                ORDER BY price ASC
            ''')
            rows = await cursor.fetchall()
            
            items = []
            for row in rows:
                items.append({
                    'id': row[0],
                    'name': row[1],
                    'description': row[2],
                    'price': row[3],
                    'category': row[4],
                    'effect_type': row[5],
                    'effect_value': row[6],
                    'duration': row[7] or 0
                })
            
            return items
            
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration des articles: {e}")
            return []
    
    async def record_purchase(self, user_id: int, item_id: int, price: int, quantity: int = 1):
        """Enregistrer un achat"""
        try:
            await self.db.execute('''
                INSERT INTO player_purchases_fixed (user_id, item_id, quantity, purchase_price)
                VALUES (?, ?, ?, ?)
            ''', (user_id, item_id, quantity, price))
            await self.db.commit()
            logger.info(f"Achat enregistr√©: User {user_id}, Item {item_id}, Prix {price}")
            
        except Exception as e:
            logger.error(f"Erreur lors de l'enregistrement de l'achat: {e}")
    
    async def add_potion_to_player(self, user_id: int, potion_name: str, effect_type: str, duration: int):
        """Ajouter une potion √† l'inventaire du joueur"""
        try:
            # V√©rifier si le joueur a d√©j√† cette potion
            cursor = await self.db.execute('''
                SELECT quantity FROM player_potions_fixed 
                WHERE user_id = ? AND potion_name = ? AND effect_type = ?
            ''', (user_id, potion_name, effect_type))
            existing = await cursor.fetchone()
            
            if existing:
                # Augmenter la quantit√©
                await self.db.execute('''
                    UPDATE player_potions_fixed 
                    SET quantity = quantity + 1 
                    WHERE user_id = ? AND potion_name = ? AND effect_type = ?
                ''', (user_id, potion_name, effect_type))
            else:
                # Ajouter nouvelle potion
                await self.db.execute('''
                    INSERT INTO player_potions_fixed (user_id, potion_name, effect_type, duration_minutes)
                    VALUES (?, ?, ?, ?)
                ''', (user_id, potion_name, effect_type, duration // 60))
            
            await self.db.commit()
            logger.info(f"Potion ajout√©e: {potion_name} pour user {user_id}")
            
        except Exception as e:
            logger.error(f"Erreur lors de l'ajout de potion: {e}")
    
    async def add_temporary_buff(self, user_id: int, buff_type: str, buff_value: float, duration: int):
        """Ajouter un buff temporaire"""
        try:
            expires_at = int(datetime.now().timestamp()) + duration
            
            await self.db.execute('''
                INSERT OR REPLACE INTO temporary_buffs_fixed 
                (user_id, buff_type, buff_value, expires_at)
                VALUES (?, ?, ?, ?)
            ''', (user_id, buff_type, buff_value, expires_at))
            await self.db.commit()
            logger.info(f"Buff temporaire ajout√©: {buff_type} pour user {user_id}")
            
        except Exception as e:
            logger.error(f"Erreur lors de l'ajout de buff: {e}")
    
    async def add_free_rolls(self, user_id: int, amount: int):
        """Ajouter des invocations gratuites"""
        try:
            cursor = await self.db.execute('''
                SELECT rolls_remaining FROM free_rolls_fixed WHERE user_id = ?
            ''', (user_id,))
            existing = await cursor.fetchone()
            
            if existing:
                await self.db.execute('''
                    UPDATE free_rolls_fixed 
                    SET rolls_remaining = rolls_remaining + ?
                    WHERE user_id = ?
                ''', (amount, user_id))
            else:
                await self.db.execute('''
                    INSERT INTO free_rolls_fixed (user_id, rolls_remaining)
                    VALUES (?, ?)
                ''', (user_id, amount))
            
            await self.db.commit()
            logger.info(f"Invocations gratuites ajout√©es: {amount} pour user {user_id}")
            
        except Exception as e:
            logger.error(f"Erreur lors de l'ajout d'invocations gratuites: {e}")
    
    async def add_guaranteed_rarity(self, user_id: int, rarity: str):
        """Ajouter une garantie de raret√©"""
        try:
            await self.db.execute('''
                INSERT INTO guaranteed_rarities_fixed (user_id, rarity)
                VALUES (?, ?)
            ''', (user_id, rarity))
            await self.db.commit()
            logger.info(f"Garantie de raret√© ajout√©e: {rarity} pour user {user_id}")
            
        except Exception as e:
            logger.error(f"Erreur lors de l'ajout de garantie: {e}")

class FixedShopView(discord.ui.View):
    """Interface de boutique unifi√©e: achat ET vente"""
    
    def __init__(self, bot, user_id: int):
        super().__init__(timeout=300)
        self.bot = bot
        self.user_id = user_id
        self.shop_db = ShopDatabase(bot)
        self.current_page = 1
        self.items_per_page = 6
        self.mode = "buy"  # "buy" ou "sell"
    
    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        return interaction.user.id == self.user_id
    
    async def create_shop_embed(self) -> discord.Embed:
        """Cr√©er l'embed de la boutique unifi√©e"""
        try:
            # Obtenir les donn√©es du joueur
            player_data = await self.bot.db.get_player_data(self.user_id)
            if not player_data:
                player_data = {'coins': 0}
            
            if self.mode == "buy":
                return await self.create_buy_embed(player_data)
            else:
                return await self.create_sell_embed(player_data)
                
        except Exception as e:
            logger.error(f"Erreur lors de la cr√©ation de l'embed: {e}")
            return discord.Embed(
                title="‚ùå Erreur",
                description="Impossible de charger la boutique.",
                color=0xff0000
            )
    
    async def create_buy_embed(self, player_data) -> discord.Embed:
        """Cr√©er l'embed d'achat"""
        try:
            # Obtenir les articles de la boutique
            all_items = await self.shop_db.get_shop_items()
            
            # Calculer la pagination
            total_pages = max(1, (len(all_items) + self.items_per_page - 1) // self.items_per_page)
            start_idx = (self.current_page - 1) * self.items_per_page
            end_idx = min(start_idx + self.items_per_page, len(all_items))
            page_items = all_items[start_idx:end_idx]
            
            # Cr√©er l'embed avec un design moderne et attractif
            embed = discord.Embed(
                title="üõçÔ∏è SHADOW ROLL ‚Ä¢ BOUTIQUE PREMIUM",
                description=f"""‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    ‚ú® COLLECTION EXCLUSIVE ‚ú®                    ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë  üåü Objets L√©gendaires ‚Ä¢ Potions Mystiques ‚Ä¢ Boosts Divins  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üíé **Votre Fortune :** `{player_data.get('coins', 0):,}` ü™ô Shadow Coins
üéØ **Mode :** Acquisition d'objets premium
üîÆ **Statut :** Boutique ouverte ‚Ä¢ Articles limit√©s""",
                color=0x7b2cbf
            )
            
            # Afficher les articles avec un design moderne
            if not page_items:
                embed.add_field(
                    name="üö´ Boutique Temporairement Ferm√©e",
                    value="```css\n[Aucun article disponible]\n```",
                    inline=False
                )
            else:
                items_text = ""
                emoji_list = ["üî•", "‚ö°", "üåü", "üíé", "üé≠", "üîÆ", "‚≠ê", "üåà"]
                
                for i, item in enumerate(page_items, 1):
                    price = item['price']
                    emoji = emoji_list[(i-1) % len(emoji_list)]
                    
                    # Cr√©er un affichage styl√© pour chaque article
                    items_text += f"‚ï≠‚îÄ {emoji} **{item['name']}**\n"
                    items_text += f"‚îú üí∞ **{price:,}** ü™ô Shadow Coins\n"
                    items_text += f"‚îú üìñ {item['description']}\n"
                    
                    # Afficher la dur√©e si applicable
                    if item['duration'] > 0:
                        hours = item['duration'] // 3600
                        minutes = (item['duration'] % 3600) // 60
                        if hours > 0:
                            items_text += f"‚îú ‚è∞ Dur√©e: **{hours}h{minutes:02d}m**\n"
                        else:
                            items_text += f"‚îú ‚è∞ Dur√©e: **{minutes}m**\n"
                    
                    items_text += f"‚ï∞‚îÄ üéØ **Num√©ro: {i}**\n\n"
                
                embed.add_field(
                    name="üõçÔ∏è Articles Disponibles",
                    value=items_text,
                    inline=False
                )
                
                # Information de pagination styl√©e
                embed.add_field(
                    name="üìö Navigation Boutique",
                    value=f"```ini\n[Page {self.current_page}/{total_pages}]\n[{len(all_items)} Articles Premium]```",
                    inline=True
                )
            
            # Instructions d'achat modernes
            embed.add_field(
                name="üéØ Guide d'Achat",
                value="```css\n‚îå‚îÄ √âtape 1: Cliquez sur 'üõí Acheter'\n‚îú‚îÄ √âtape 2: Entrez le num√©ro de l'article\n‚îî‚îÄ √âtape 3: Confirmez votre achat premium```",
                inline=False
            )
            
            # Footer √©l√©gant
            embed.set_footer(
                text="‚ú® Shadow Roll Premium Store",
                icon_url=self.bot.user.avatar.url if self.bot.user.avatar else None
            )
            
            return embed
            
        except Exception as e:
            logger.error(f"Erreur lors de la cr√©ation de l'embed d'achat: {e}")
            return discord.Embed(
                title="‚ùå Erreur",
                description="Impossible de charger les articles.",
                color=0xff0000
            )
    
    async def create_sell_embed(self, player_data) -> discord.Embed:
        """Cr√©er l'embed de vente"""
        try:
            # Cr√©er l'embed avec un design moderne et attractif
            embed = discord.Embed(
                title="üí∞ SHADOW ROLL ‚Ä¢ MARCH√â PREMIUM",
                description=f"""‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üíé VENTE COLLECTION PREMIUM üíé                    ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë  üåü Transformez vos doubles en fortune ‚Ä¢ Prix garantis  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üè¶ **Votre Fortune :** `{player_data.get('coins', 0):,}` ü™ô Shadow Coins
üéØ **Mode :** Vente de personnages premium
üíµ **Taux :** 70% de la valeur originale garantie""",
                color=0x2ecc71
            )
            
            # Obtenir l'inventaire du joueur
            inventory = await self.bot.db.get_user_inventory(self.user_id, limit=50)
            
            if not inventory:
                embed.add_field(
                    name="üì¶ Inventaire Vide",
                    value="Aucun personnage √† vendre.",
                    inline=False
                )
            else:
                # Grouper par raret√© et compter les doublons
                rarity_groups = {}
                character_counts = {}
                total_value = 0
                
                for item in inventory:
                    rarity = item.get('rarity', 'Common')
                    char_name = item.get('name', 'Unknown')
                    
                    # Calculer la valeur de vente (70% de la valeur originale)
                    original_value = item.get('value', 0)
                    sell_value = int(original_value * 0.7)
                    total_value += sell_value
                    
                    # Cr√©er une cl√© unique pour chaque personnage
                    char_key = f"{char_name}_{rarity}"
                    
                    if char_key not in character_counts:
                        character_counts[char_key] = {
                            'name': char_name,
                            'rarity': rarity,
                            'sell_value': sell_value,
                            'count': 0
                        }
                    
                    character_counts[char_key]['count'] += 1
                
                # Regrouper par raret√© avec les comptes
                for char_key, char_data in character_counts.items():
                    rarity = char_data['rarity']
                    if rarity not in rarity_groups:
                        rarity_groups[rarity] = []
                    rarity_groups[rarity].append(char_data)
                
                # Afficher l'inventaire group√©
                inventory_text = ""
                for rarity in ['Secret', 'Fusion', 'Titan', 'Evolve', 'Mythic', 'Legendary', 'Epic', 'Rare', 'Common']:
                    if rarity not in rarity_groups:
                        continue
                        
                    items = rarity_groups[rarity]
                    rarity_color = BotConfig.RARITY_COLORS.get(rarity, 0x808080)
                    
                    if rarity_color == 0xff0000:  # Red
                        color_code = "\u001b[1;31m"
                    elif rarity_color == 0xffa500:  # Orange/Yellow
                        color_code = "\u001b[1;33m"
                    elif rarity_color == 0xa335ee:  # Purple
                        color_code = "\u001b[1;35m"
                    elif rarity_color == 0x0070dd:  # Blue
                        color_code = "\u001b[1;34m"
                    elif rarity_color == 0x00ff00:  # Green
                        color_code = "\u001b[1;32m"
                    elif rarity_color == 0xffffff:  # White
                        color_code = "\u001b[1;37m"
                    elif rarity_color == 0xff1493:  # Pink
                        color_code = "\u001b[1;35m"
                    elif rarity_color == 0x000000:  # Black
                        color_code = "\u001b[1;30m"
                    else:
                        color_code = "\u001b[1;36m"  # Cyan default
                    
                    rarity_emoji = BotConfig.RARITY_EMOJIS.get(rarity, '‚óÜ')
                    inventory_text += f"{color_code}{rarity_emoji} {rarity} ({len(items)})\u001b[0m\n"
                    
                    # Afficher max 3 personnages par raret√© avec compteurs
                    for item in items[:3]:
                        name = item.get('name', 'Unknown')
                        sell_value = item.get('sell_value', 0)
                        count = item.get('count', 1)
                        
                        if count > 1:
                            inventory_text += f"   ‚Ä¢ {name} x{count} - {sell_value:,} SC chacun\n"
                        else:
                            inventory_text += f"   ‚Ä¢ {name} - {sell_value:,} SC\n"
                    
                    if len(items) > 3:
                        inventory_text += f"   ... et {len(items) - 3} autres\n"
                    inventory_text += "\n"
                
                embed.add_field(
                    name=f"üéí {apply_font_style('VOTRE INVENTAIRE', 'section')}",
                    value=f"```ansi\n{inventory_text}```",
                    inline=False
                )
                
                # Valeur totale potentielle
                embed.add_field(
                    name="üíé Valeur Totale de l'Inventaire",
                    value=f"```ansi\n\u001b[1;32m{total_value:,}\u001b[0m Shadow Coins (prix de vente)```",
                    inline=False
                )
            
            # Instructions de vente
            embed.add_field(
                name="ü™ô Comment Vendre",
                value="```\n1. Cliquez sur 'ü™ô Vendre'\n2. Entrez le nom du personnage\n3. Confirmez la vente\n```",
                inline=False
            )
            
            embed.set_footer(
                text=f"{apply_font_style('SHADOW ROLL SHOP', 'serif')}",
                icon_url=self.bot.user.avatar.url if self.bot.user.avatar else None
            )
            
            return embed
            
        except Exception as e:
            logger.error(f"Erreur lors de la cr√©ation de l'embed de vente: {e}")
            return discord.Embed(
                title="‚ùå Erreur",
                description="Impossible de charger l'inventaire.",
                color=0xff0000
            )
    
    async def process_purchase(self, item: Dict, user_id: int) -> bool:
        """Traiter l'achat d'un article"""
        try:
            # Enregistrer l'achat
            await self.shop_db.record_purchase(user_id, item['id'], item['price'])
            
            # Appliquer l'effet selon le type
            effect_type = item['effect_type']
            effect_value = item['effect_value']
            duration = item.get('duration', 0)
            
            if effect_type == 'luck_boost':
                # Ajouter buff de chance
                await self.shop_db.add_temporary_buff(user_id, 'luck_boost', float(effect_value), duration)
                await self.shop_db.add_potion_to_player(user_id, item['name'], effect_type, duration)
                
            elif effect_type == 'coin_multiplier':
                # Ajouter multiplicateur de pi√®ces
                await self.shop_db.add_temporary_buff(user_id, 'coin_multiplier', float(effect_value), duration)
                await self.shop_db.add_potion_to_player(user_id, item['name'], effect_type, duration)
                
            elif effect_type == 'cooldown_reset':
                # Reset cooldowns (effet instantan√©)
                try:
                    await self.bot.db.reset_all_cooldowns(user_id)
                except:
                    # Si la m√©thode n'existe pas, ignorer silencieusement
                    pass
                
            elif effect_type == 'free_rolls':
                # Ajouter invocations gratuites
                await self.shop_db.add_free_rolls(user_id, int(effect_value))
                
            elif effect_type == 'epic_guarantee' or effect_type == 'legendary_guarantee':
                # Ajouter garantie de raret√©
                rarity = effect_value  # 'Epic' ou 'Legendary'
                await self.shop_db.add_guaranteed_rarity(user_id, rarity)
                
            elif effect_type == 'mega_pack':
                # Combo pack
                await self.shop_db.add_free_rolls(user_id, int(effect_value))
                await self.shop_db.add_temporary_buff(user_id, 'luck_boost', 1.5, 1800)  # 30 min
                
            elif effect_type == 'craft_discount':
                # R√©duction craft
                await self.shop_db.add_temporary_buff(user_id, 'craft_discount', float(effect_value), duration)
            
            return True
            
        except Exception as e:
            logger.error(f"Erreur lors du traitement de l'achat: {e}")
            return False
    
    # Boutons de mode
    @discord.ui.button(label='üõí Mode Achat', style=discord.ButtonStyle.success, row=0)
    async def buy_mode_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        self.mode = "buy"
        self.current_page = 1
        await interaction.response.defer()
        embed = await self.create_shop_embed()
        await interaction.edit_original_response(embed=embed, view=self)
    
    @discord.ui.button(label='ü™ô Mode Vente', style=discord.ButtonStyle.danger, row=0)
    async def sell_mode_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        self.mode = "sell"
        self.current_page = 1
        await interaction.response.defer()
        embed = await self.create_shop_embed()
        await interaction.edit_original_response(embed=embed, view=self)
    
    @discord.ui.button(label='‚óÄÔ∏è Pr√©c√©dent', style=discord.ButtonStyle.secondary, row=0)
    async def previous_page(self, interaction: discord.Interaction, button: discord.ui.Button):
        if self.current_page > 1:
            self.current_page -= 1
            await interaction.response.defer()
            embed = await self.create_shop_embed()
            await interaction.edit_original_response(embed=embed, view=self)
        else:
            await interaction.response.send_message("‚ùå Vous √™tes d√©j√† sur la premi√®re page.", ephemeral=True)
    
    @discord.ui.button(label='‚ñ∂Ô∏è Suivant', style=discord.ButtonStyle.secondary, row=0)
    async def next_page(self, interaction: discord.Interaction, button: discord.ui.Button):
        if self.mode == "buy":
            all_items = await self.shop_db.get_shop_items()
            total_pages = max(1, (len(all_items) + self.items_per_page - 1) // self.items_per_page)
            
            if self.current_page < total_pages:
                self.current_page += 1
                await interaction.response.defer()
                embed = await self.create_shop_embed()
                await interaction.edit_original_response(embed=embed, view=self)
            else:
                await interaction.response.send_message("‚ùå Vous √™tes d√©j√† sur la derni√®re page.", ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå Pagination non disponible en mode vente.", ephemeral=True)
    
    @discord.ui.button(label='üîÑ Actualiser', style=discord.ButtonStyle.primary, row=0)
    async def refresh_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        embed = await self.create_shop_embed()
        await interaction.edit_original_response(embed=embed, view=self)
    
    # Boutons d'action
    @discord.ui.button(label='üõçÔ∏è Acheter Article', style=discord.ButtonStyle.success, row=1)
    async def purchase_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if self.mode != "buy":
            await interaction.response.send_message("‚ùå Basculez en mode achat pour acheter des articles.", ephemeral=True)
            return
        await interaction.response.send_modal(PurchaseModal(self.bot, self.user_id, self))
    
    @discord.ui.button(label='ü™ô Vendre Personnage', style=discord.ButtonStyle.danger, row=1)
    async def sell_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if self.mode != "sell":
            await interaction.response.send_message("‚ùå Basculez en mode vente pour vendre des personnages.", ephemeral=True)
            return
        await interaction.response.send_modal(SellCharacterModal(self.bot, self.user_id, self))
    
    @discord.ui.button(label='üè† Menu Principal', style=discord.ButtonStyle.danger, row=1)
    async def back_to_menu(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        from modules.menu import ShadowMenuView, create_main_menu_embed
        view = ShadowMenuView(self.bot, self.user_id)
        embed = await create_main_menu_embed(self.bot, self.user_id)
        await interaction.edit_original_response(embed=embed, view=view)

class PurchaseModal(discord.ui.Modal):
    """Modal d'achat d'articles"""
    
    def __init__(self, bot, user_id: int, shop_view: FixedShopView):
        super().__init__(title="üõí Acheter un Article")
        self.bot = bot
        self.user_id = user_id
        self.shop_view = shop_view
        
        self.item_number = discord.ui.TextInput(
            label="Num√©ro de l'article",
            placeholder="Entrez le num√©ro affich√© (ex: 1, 2, 3...)",
            min_length=1,
            max_length=2,
            required=True
        )
        self.add_item(self.item_number)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            # Valider l'entr√©e
            try:
                selection = int(self.item_number.value)
            except ValueError:
                await interaction.response.send_message(
                    "‚ùå Veuillez entrer un num√©ro valide!", 
                    ephemeral=True
                )
                return
            
            # Obtenir les articles de la page actuelle
            all_items = await self.shop_view.shop_db.get_shop_items()
            start_idx = (self.shop_view.current_page - 1) * self.shop_view.items_per_page
            end_idx = min(start_idx + self.shop_view.items_per_page, len(all_items))
            page_items = all_items[start_idx:end_idx]
            
            if selection < 1 or selection > len(page_items):
                await interaction.response.send_message(
                    f"‚ùå Num√©ro invalide! Choisissez entre 1 et {len(page_items)}", 
                    ephemeral=True
                )
                return
            
            selected_item = page_items[selection - 1]
            
            # V√©rifier le solde du joueur
            player_data = await self.bot.db.get_player_data(self.user_id)
            if not player_data:
                await interaction.response.send_message(
                    "‚ùå Impossible de r√©cup√©rer vos donn√©es!", 
                    ephemeral=True
                )
                return
            
            player_coins = player_data.get('coins', 0)
            item_price = selected_item['price']
            
            if player_coins < item_price:
                deficit = item_price - player_coins
                await interaction.response.send_message(
                    f"‚ùå **Fonds insuffisants!**\n"
                    f"ü™ô Prix: {item_price:,} SC\n"
                    f"ü™ô Votre solde: {player_coins:,} SC\n"
                    f"ü™ô Il vous manque: {deficit:,} SC",
                    ephemeral=True
                )
                return
            
            # Traiter l'achat
            purchase_success = await self.shop_view.process_purchase(selected_item, self.user_id)
            
            if purchase_success:
                # D√©duire le co√ªt
                new_balance = player_coins - item_price
                await self.bot.db.update_player_coins(self.user_id, new_balance)
                
                # Confirmation d'achat
                embed = discord.Embed(
                    title="‚úÖ Achat R√©ussi!",
                    description=f"**{selected_item['name']}** achet√© avec succ√®s!",
                    color=0x00ff00
                )
                embed.add_field(
                    name="ü™ô Transaction",
                    value=f"Prix: {item_price:,} SC\nNouveau solde: {new_balance:,} SC",
                    inline=False
                )
                embed.add_field(
                    name="üì¶ Article",
                    value=selected_item['description'],
                    inline=False
                )
                
                await interaction.response.send_message(embed=embed, ephemeral=True)
                
                # Mettre √† jour l'affichage de la boutique
                try:
                    updated_embed = await self.shop_view.create_shop_embed()
                    await interaction.edit_original_response(embed=updated_embed, view=self.shop_view)
                except:
                    pass  # Ignorer si l'√©dition √©choue
                
            else:
                await interaction.response.send_message(
                    "‚ùå Erreur lors du traitement de l'achat. Veuillez r√©essayer.",
                    ephemeral=True
                )
                
        except Exception as e:
            logger.error(f"Erreur dans le modal d'achat: {e}")
            await interaction.response.send_message(
                "‚ùå Une erreur inattendue s'est produite.",
                ephemeral=True
            )

class SellCharacterModal(discord.ui.Modal):
    """Modal pour vendre des personnages"""
    
    def __init__(self, bot, user_id: int, shop_view):
        super().__init__(title="ü™ô Vendre un Personnage")
        self.bot = bot
        self.user_id = user_id
        self.shop_view = shop_view
        
        self.character_name = discord.ui.TextInput(
            label="Nom du personnage",
            placeholder="Entrez le nom exact du personnage √† vendre",
            min_length=1,
            max_length=100,
            required=True
        )
        self.add_item(self.character_name)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            character_name = self.character_name.value.strip()
            
            # Obtenir l'inventaire du joueur
            inventory = await self.bot.db.get_user_inventory(self.user_id)
            
            if not inventory:
                await interaction.response.send_message(
                    "‚ùå Votre inventaire est vide!",
                    ephemeral=True
                )
                return
            
            # Chercher le personnage (recherche exacte puis partielle)
            character_found = None
            for item in inventory:
                if item.get('name', '').lower() == character_name.lower():
                    character_found = item
                    break
            
            # Si pas trouv√©, recherche partielle
            if not character_found:
                for item in inventory:
                    if character_name.lower() in item.get('name', '').lower():
                        character_found = item
                        break
            
            if not character_found:
                await interaction.response.send_message(
                    f"‚ùå Personnage '{character_name}' non trouv√© dans votre inventaire.",
                    ephemeral=True
                )
                return
            
            # Calculer le prix de vente (70% de la valeur originale)
            original_value = character_found.get('value', 0)
            sell_price = int(original_value * 0.7)
            
            if sell_price <= 0:
                await interaction.response.send_message(
                    f"‚ùå Ce personnage n'a aucune valeur de vente.",
                    ephemeral=True
                )
                return
            
            # Cr√©er l'embed de confirmation
            rarity = character_found.get('rarity', 'Common')
            rarity_emoji = BotConfig.RARITY_EMOJIS.get(rarity, '‚óÜ')
            rarity_color = BotConfig.RARITY_COLORS.get(rarity, 0x808080)
            
            embed = discord.Embed(
                title="ü™ô Confirmer la Vente",
                description=f"Voulez-vous vraiment vendre ce personnage?",
                color=rarity_color
            )
            
            embed.add_field(
                name=f"{rarity_emoji} Personnage",
                value=f"**{character_found['name']}**\nRaret√©: {rarity}",
                inline=True
            )
            
            embed.add_field(
                name="ü™ô Prix de Vente",
                value=f"**{sell_price:,}** Shadow Coins",
                inline=True
            )
            
            embed.add_field(
                name="üìä D√©tails",
                value=f"Valeur originale: {original_value:,} SC\nPourcentage de vente: 70%",
                inline=False
            )
            
            # Cr√©er les boutons de confirmation
            view = SellConfirmationView(self.bot, self.user_id, character_found, sell_price, self.shop_view)
            
            await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
            
        except Exception as e:
            logger.error(f"Erreur dans le modal de vente: {e}")
            await interaction.response.send_message(
                "‚ùå Erreur lors de la pr√©paration de la vente.",
                ephemeral=True
            )

class SellConfirmationView(discord.ui.View):
    """Vue de confirmation pour la vente de personnages"""
    
    def __init__(self, bot, user_id: int, character: dict, sell_price: int, shop_view):
        super().__init__(timeout=60)
        self.bot = bot
        self.user_id = user_id
        self.character = character
        self.sell_price = sell_price
        self.shop_view = shop_view
    
    @discord.ui.button(label='‚úÖ Confirmer la Vente', style=discord.ButtonStyle.success)
    async def confirm_sell(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            # V√©rifier que le joueur poss√®de toujours le personnage
            inventory = await self.bot.db.get_user_inventory(self.user_id)
            character_still_owned = False
            
            for item in inventory:
                if (item.get('name') == self.character.get('name') and 
                    item.get('rarity') == self.character.get('rarity')):
                    character_still_owned = True
                    break
            
            if not character_still_owned:
                await interaction.response.send_message(
                    "‚ùå Vous ne poss√©dez plus ce personnage!",
                    ephemeral=True
                )
                return
            
            # Trouver l'ID d'inventaire du personnage √† vendre
            inventory = await self.bot.db.get_user_inventory(self.user_id)
            inventory_item_id = None
            
            for item in inventory:
                if (item.get('name') == self.character.get('name') and 
                    item.get('rarity') == self.character.get('rarity')):
                    inventory_item_id = item.get('inventory_id')
                    break
            
            if not inventory_item_id:
                await interaction.response.send_message(
                    "‚ùå Impossible de trouver ce personnage dans votre inventaire!",
                    ephemeral=True
                )
                return
            
            # Effectuer la vente avec les bons param√®tres
            success, message, actual_sell_price = await self.bot.db.sell_character(
                self.user_id, 
                inventory_item_id
            )
            
            if success:
                # Cr√©er l'embed de succ√®s
                embed = discord.Embed(
                    title="‚úÖ Vente R√©ussie!",
                    description=f"**{self.character['name']}** vendu avec succ√®s!",
                    color=0x00ff00
                )
                embed.add_field(
                    name="ü™ô Gains",
                    value=f"{actual_sell_price:,} Shadow Coins ajout√©s √† votre solde",
                    inline=False
                )
                embed.add_field(
                    name="üìã Message",
                    value=message,
                    inline=False
                )
                
                await interaction.response.send_message(embed=embed, ephemeral=True)
                
                # Mettre √† jour l'affichage de la boutique
                try:
                    self.shop_view.mode = "sell"  # Rester en mode vente
                    updated_embed = await self.shop_view.create_shop_embed()
                    await interaction.edit_original_response(embed=updated_embed, view=self.shop_view)
                except:
                    pass  # Ignorer si l'√©dition √©choue
                
            else:
                await interaction.response.send_message(
                    f"‚ùå Erreur lors de la vente: {message}",
                    ephemeral=True
                )
                
        except Exception as e:
            logger.error(f"Erreur lors de la confirmation de vente: {e}")
            await interaction.response.send_message(
                "‚ùå Une erreur s'est produite lors de la vente.",
                ephemeral=True
            )
    
    @discord.ui.button(label='‚ùå Annuler', style=discord.ButtonStyle.secondary)
    async def cancel_sell(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = discord.Embed(
            title="‚ùå Vente Annul√©e",
            description="La vente a √©t√© annul√©e.",
            color=0x808080
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)

# Fonction d'initialisation
async def setup_fixed_shop_system(bot):
    """Initialiser le syst√®me de boutique corrig√©"""
    try:
        shop_db = ShopDatabase(bot)
        await shop_db.initialize_shop_tables()
        await shop_db.add_default_shop_items()
        
        logger.info("Syst√®me de boutique corrig√© initialis√© avec succ√®s")
        return shop_db
        
    except Exception as e:
        logger.error(f"Erreur lors de l'initialisation du shop corrig√©: {e}")
        return None

# Fonction pour cr√©er la vue de boutique
async def create_fixed_shop_view(bot, user_id: int) -> FixedShopView:
    """Cr√©er une vue de boutique corrig√©e"""
    shop_view = FixedShopView(bot, user_id)
    # Initialiser la base de donn√©es si n√©cessaire
    await shop_view.shop_db.initialize_shop_tables()
    await shop_view.shop_db.add_default_shop_items()
    return shop_view