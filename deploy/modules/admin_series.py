"""
Syst√®me de Gestion des S√©ries pour Admins - Shadow Roll Bot
Permet de cr√©er de nouvelles s√©ries et d'assigner des personnages
"""

import discord
from discord.ext import commands
import logging
from typing import Optional, List, Dict, Any
import asyncio

from core.config import BotConfig
from modules.utils import format_number, get_display_name

logger = logging.getLogger(__name__)

class SeriesManagementView(discord.ui.View):
    """Interface de gestion des s√©ries pour admins"""
    
    def __init__(self, bot, user_id: int):
        super().__init__(timeout=600)
        self.bot = bot
        self.user_id = user_id
        self.current_page = 0
        self.mode = "main"  # main, create, assign, edit
        self.selected_series = None
        
    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        return interaction.user.id == self.user_id
    
    async def create_main_embed(self) -> discord.Embed:
        """Cr√©er l'embed principal de gestion des s√©ries"""
        embed = discord.Embed(
            title="üéñÔ∏è ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê„Äî G E S T I O N   D E S   S √â R I E S „Äï‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üéñÔ∏è",
            description="```\n‚óÜ Administration des S√©ries d'Anime ‚óÜ\n```",
            color=BotConfig.RARITY_COLORS['Legendary']
        )
        
        # R√©cup√©rer les s√©ries existantes
        series_data = await self.get_all_series()
        
        embed.add_field(
            name="üìä ‚ïê‚ïê‚ïê„Äî Statistiques Actuelles „Äï‚ïê‚ïê‚ïê üìä",
            value=(f"```\n"
                   f"S√©ries Totales: {len(series_data)}\n"
                   f"Personnages Assign√©s: {sum(len(s['characters']) for s in series_data)}\n"
                   f"Bonus Actifs: {len([s for s in series_data if s.get('bonus_type')])}\n"
                   f"```"),
            inline=False
        )
        
        # Afficher les s√©ries existantes
        if series_data:
            series_list = ""
            for i, series in enumerate(series_data[:10]):  # Limiter √† 10 pour l'affichage
                bonus_text = ""
                if series.get('bonus_type') and series.get('bonus_value'):
                    bonus_text = f" (+{series['bonus_value']}% {series['bonus_type']})"
                series_list += f"‚Ä¢ {series['name']}: {len(series['characters'])} perso{bonus_text}\n"
            
            embed.add_field(
                name="üé≠ ‚ïê‚ïê‚ïê„Äî S√©ries Existantes „Äï‚ïê‚ïê‚ïê üé≠",
                value=f"```\n{series_list}```",
                inline=False
            )
        
        embed.add_field(
            name="üõ†Ô∏è ‚ïê‚ïê‚ïê„Äî Actions Disponibles „Äï‚ïê‚ïê‚ïê üõ†Ô∏è",
            value=("```\n"
                   "üÜï Cr√©er S√©rie - Nouvelle s√©rie d'anime\n"
                   "üìù Assigner - Ajouter personnages √† s√©rie\n"
                   "‚öôÔ∏è Modifier - √âditer s√©rie existante\n"
                   "üìã D√©tails - Voir s√©rie compl√®te\n"
                   "üóëÔ∏è Supprimer - Retirer une s√©rie\n"
                   "```"),
            inline=False
        )
        
        embed.set_footer(text=f"Shadow Roll Bot {BotConfig.VERSION} ‚Ä¢ Gestion S√©ries Admin")
        return embed
    
    async def get_all_series(self) -> List[Dict]:
        """R√©cup√©rer toutes les s√©ries avec leurs personnages"""
        try:
            async with self.bot.db.db.execute("""
                SELECT DISTINCT anime FROM characters 
                WHERE anime IS NOT NULL AND anime != ''
            """) as cursor:
                series_names = [row[0] for row in await cursor.fetchall()]
            
            series_data = []
            for series_name in series_names:
                # R√©cup√©rer les personnages de cette s√©rie
                async with self.bot.db.db.execute("""
                    SELECT name, rarity FROM characters 
                    WHERE anime = ?
                """, (series_name,)) as cursor:
                    characters = await cursor.fetchall()
                
                # R√©cup√©rer les bonus de s√©rie s'ils existent
                bonus_data = await self.get_series_bonus(series_name)
                
                series_data.append({
                    'name': series_name,
                    'characters': characters,
                    'bonus_type': bonus_data.get('bonus_type'),
                    'bonus_value': bonus_data.get('bonus_value')
                })
            
            return series_data
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration des s√©ries: {e}")
            return []
    
    async def get_series_bonus(self, series_name: str) -> Dict:
        """R√©cup√©rer les bonus d'une s√©rie"""
        # Pour l'instant, utilisons les bonus hardcod√©s du config
        # Plus tard on pourrait les stocker en base
        series_bonuses = {
            'Naruto': {'bonus_type': 'rarity', 'bonus_value': 1.0},
            'One Piece': {'bonus_type': 'coins', 'bonus_value': 15.0},
            'Attack on Titan': {'bonus_type': 'coins', 'bonus_value': 10.0},
            'Demon Slayer': {'bonus_type': 'coins', 'bonus_value': 8.0},
            'Dragon Ball Z': {'bonus_type': 'coins', 'bonus_value': 12.0},
            'My Hero Academia': {'bonus_type': 'coins', 'bonus_value': 7.0},
            'Death Note': {'bonus_type': 'rarity', 'bonus_value': 0.5},
            'Fullmetal Alchemist': {'bonus_type': 'coins', 'bonus_value': 6.0},
            'Hunter x Hunter': {'bonus_type': 'rarity', 'bonus_value': 0.8},
            'Bleach': {'bonus_type': 'coins', 'bonus_value': 9.0}
        }
        
        return series_bonuses.get(series_name, {})
    
    @discord.ui.button(label="üÜï Cr√©er S√©rie", style=discord.ButtonStyle.success, row=0)
    async def create_series_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Cr√©er une nouvelle s√©rie"""
        modal = CreateSeriesModal(self.bot, self)
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="üìù Assigner", style=discord.ButtonStyle.primary, row=0)
    async def assign_character_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Assigner des personnages √† une s√©rie"""
        view = AssignCharacterView(self.bot, self.user_id, self)
        embed = await view.create_assign_embed()
        await interaction.response.edit_message(embed=embed, view=view)
    
    @discord.ui.button(label="‚öôÔ∏è Modifier", style=discord.ButtonStyle.secondary, row=0)
    async def edit_series_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Modifier une s√©rie existante"""
        view = EditSeriesView(self.bot, self.user_id, self)
        embed = await view.create_edit_embed()
        await interaction.response.edit_message(embed=embed, view=view)
    
    @discord.ui.button(label="üìã D√©tails", style=discord.ButtonStyle.secondary, row=1)
    async def details_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Voir les d√©tails d'une s√©rie"""
        view = SeriesDetailsView(self.bot, self.user_id, self)
        embed = await view.create_details_embed()
        await interaction.response.edit_message(embed=embed, view=view)
    
    @discord.ui.button(label="üóëÔ∏è Supprimer", style=discord.ButtonStyle.danger, row=1)
    async def delete_series_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Supprimer une s√©rie"""
        view = DeleteSeriesView(self.bot, self.user_id, self)
        embed = await view.create_delete_embed()
        await interaction.response.edit_message(embed=embed, view=view)
    
    @discord.ui.button(label="üè† Menu Admin", style=discord.ButtonStyle.secondary, row=2)
    async def back_to_admin_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Retour au menu admin"""
        await interaction.response.defer()
        from modules.admin_complete import AdminCompleteView
        view = AdminCompleteView(self.bot, self.user_id)
        embed = await view.create_main_embed()
        await interaction.edit_original_response(embed=embed, view=view)


class CreateSeriesModal(discord.ui.Modal, title="üÜï Cr√©er Nouvelle S√©rie"):
    """Modal pour cr√©er une nouvelle s√©rie"""
    
    def __init__(self, bot, parent_view):
        super().__init__()
        self.bot = bot
        self.parent_view = parent_view
    
    series_name = discord.ui.TextInput(
        label="Nom de la S√©rie",
        placeholder="Ex: Jujutsu Kaisen",
        required=True,
        max_length=50
    )
    
    bonus_type = discord.ui.TextInput(
        label="Type de Bonus (coins/rarity)",
        placeholder="coins ou rarity",
        required=False,
        max_length=10
    )
    
    bonus_value = discord.ui.TextInput(
        label="Valeur du Bonus (%)",
        placeholder="Ex: 5.0 pour +5%",
        required=False,
        max_length=10
    )
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            series_name = self.series_name.value.strip()
            bonus_type = self.bonus_type.value.strip().lower() if self.bonus_type.value else None
            bonus_value = float(self.bonus_value.value) if self.bonus_value.value else 0.0
            
            # V√©rifier si la s√©rie existe d√©j√†
            async with self.bot.db.db.execute("""
                SELECT COUNT(*) FROM characters WHERE anime = ?
            """, (series_name,)) as cursor:
                exists = (await cursor.fetchone())[0] > 0
            
            if exists:
                embed = discord.Embed(
                    title="‚ùå S√©rie Existante",
                    description=f"La s√©rie '{series_name}' existe d√©j√†!",
                    color=0xff0000
                )
                await interaction.response.edit_message(embed=embed, view=self.parent_view)
                return
            
            # Validation du type de bonus
            if bonus_type and bonus_type not in ['coins', 'rarity']:
                embed = discord.Embed(
                    title="‚ùå Type de Bonus Invalide",
                    description="Le type de bonus doit √™tre 'coins' ou 'rarity'",
                    color=0xff0000
                )
                await interaction.response.edit_message(embed=embed, view=self.parent_view)
                return
            
            # Cr√©er la s√©rie (elle sera cr√©√©e automatiquement quand on assignera des personnages)
            embed = discord.Embed(
                title="‚úÖ S√©rie Pr√©par√©e",
                description=(f"S√©rie '{series_name}' pr√©par√©e!\n"
                           f"Bonus: {bonus_type} +{bonus_value}% (si sp√©cifi√©)\n\n"
                           f"Utilisez maintenant 'üìù Assigner' pour ajouter des personnages."),
                color=0x00ff00
            )
            
            # Sauvegarder temporairement les infos de bonus
            if not hasattr(self.bot, 'temp_series_bonuses'):
                self.bot.temp_series_bonuses = {}
            
            if bonus_type:
                self.bot.temp_series_bonuses[series_name] = {
                    'bonus_type': bonus_type,
                    'bonus_value': bonus_value
                }
            
            await interaction.response.edit_message(embed=embed, view=self.parent_view)
            
        except ValueError:
            embed = discord.Embed(
                title="‚ùå Valeur Invalide",
                description="La valeur du bonus doit √™tre un nombre valide",
                color=0xff0000
            )
            await interaction.response.edit_message(embed=embed, view=self.parent_view)
        except Exception as e:
            logger.error(f"Erreur lors de la cr√©ation de s√©rie: {e}")
            embed = discord.Embed(
                title="‚ùå Erreur",
                description=f"Erreur: {str(e)}",
                color=0xff0000
            )
            await interaction.response.edit_message(embed=embed, view=self.parent_view)


class AssignCharacterView(discord.ui.View):
    """Vue pour assigner des personnages √† une s√©rie"""
    
    def __init__(self, bot, user_id: int, parent_view):
        super().__init__(timeout=600)
        self.bot = bot
        self.user_id = user_id
        self.parent_view = parent_view
        self.current_page = 0
        self.characters_per_page = 10
        self.selected_characters = []
        self.target_series = None
    
    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        return interaction.user.id == self.user_id
    
    async def create_assign_embed(self) -> discord.Embed:
        """Cr√©er l'embed d'assignation"""
        embed = discord.Embed(
            title="üìù ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê„Äî A S S I G N E R   P E R S O N N A G E S „Äï‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üìù",
            description="```\n‚óÜ Assignez des personnages √† une s√©rie ‚óÜ\n```",
            color=BotConfig.RARITY_COLORS['Epic']
        )
        
        if self.target_series:
            embed.add_field(
                name="üéØ S√©rie Cible",
                value=f"```{self.target_series}```",
                inline=False
            )
        
        # R√©cup√©rer les personnages sans s√©rie ou avec une s√©rie diff√©rente
        unassigned_chars = await self.get_unassigned_characters()
        
        if unassigned_chars:
            start_idx = self.current_page * self.characters_per_page
            end_idx = start_idx + self.characters_per_page
            chars_page = unassigned_chars[start_idx:end_idx]
            
            char_list = ""
            for i, char in enumerate(chars_page, start_idx + 1):
                current_series = char[2] if char[2] else "Aucune"
                selected = "‚úÖ" if char[0] in self.selected_characters else "‚¨ú"
                char_list += f"{selected} {i}. {char[1]} ({char[3]}) - {current_series}\n"
            
            embed.add_field(
                name=f"üë• Personnages Disponibles (Page {self.current_page + 1})",
                value=f"```{char_list}```",
                inline=False
            )
            
            if self.selected_characters:
                embed.add_field(
                    name="‚úÖ Personnages S√©lectionn√©s",
                    value=f"```{len(self.selected_characters)} personnages```",
                    inline=True
                )
        else:
            embed.add_field(
                name="‚ÑπÔ∏è Information",
                value="```Tous les personnages sont d√©j√† assign√©s```",
                inline=False
            )
        
        embed.set_footer(text="Utilisez les boutons pour naviguer et s√©lectionner")
        return embed
    
    async def get_unassigned_characters(self) -> List[tuple]:
        """R√©cup√©rer les personnages disponibles pour assignation"""
        try:
            async with self.bot.db.db.execute("""
                SELECT id, name, anime, rarity FROM characters 
                ORDER BY name
            """) as cursor:
                return await cursor.fetchall()
        except Exception as e:
            logger.error(f"Erreur r√©cup√©ration personnages: {e}")
            return []
    
    @discord.ui.button(label="üéØ Choisir S√©rie", style=discord.ButtonStyle.primary, row=0)
    async def choose_series_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Choisir la s√©rie cible"""
        modal = ChooseSeriesModal(self.bot, self)
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="‚¨ú S√©lectionner", style=discord.ButtonStyle.secondary, row=0)
    async def select_character_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """S√©lectionner un personnage"""
        modal = SelectCharacterModal(self.bot, self)
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="üíæ Assigner", style=discord.ButtonStyle.success, row=0)
    async def assign_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Effectuer l'assignation"""
        if not self.target_series:
            embed = discord.Embed(
                title="‚ùå S√©rie Manquante",
                description="Veuillez d'abord choisir une s√©rie cible",
                color=0xff0000
            )
            await interaction.response.edit_message(embed=embed, view=self)
            return
        
        if not self.selected_characters:
            embed = discord.Embed(
                title="‚ùå Personnages Manquants",
                description="Veuillez s√©lectionner au moins un personnage",
                color=0xff0000
            )
            await interaction.response.edit_message(embed=embed, view=self)
            return
        
        try:
            # Assigner les personnages √† la s√©rie
            for char_id in self.selected_characters:
                await self.bot.db.db.execute("""
                    UPDATE characters SET anime = ? WHERE id = ?
                """, (self.target_series, char_id))
            
            await self.bot.db.db.commit()
            
            embed = discord.Embed(
                title="‚úÖ Assignation R√©ussie",
                description=f"{len(self.selected_characters)} personnages assign√©s √† '{self.target_series}'",
                color=0x00ff00
            )
            
            # Retour au menu principal
            main_embed = await self.parent_view.create_main_embed()
            await interaction.response.edit_message(embed=main_embed, view=self.parent_view)
            
        except Exception as e:
            logger.error(f"Erreur assignation: {e}")
            embed = discord.Embed(
                title="‚ùå Erreur",
                description=f"Erreur lors de l'assignation: {str(e)}",
                color=0xff0000
            )
            await interaction.response.edit_message(embed=embed, view=self)
    
    @discord.ui.button(label="‚¨ÖÔ∏è Pr√©c√©dent", style=discord.ButtonStyle.secondary, row=1)
    async def previous_page_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Page pr√©c√©dente"""
        if self.current_page > 0:
            self.current_page -= 1
            embed = await self.create_assign_embed()
            await interaction.response.edit_message(embed=embed, view=self)
        else:
            await interaction.response.defer()
    
    @discord.ui.button(label="‚û°Ô∏è Suivant", style=discord.ButtonStyle.secondary, row=1)
    async def next_page_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Page suivante"""
        unassigned_chars = await self.get_unassigned_characters()
        max_pages = (len(unassigned_chars) - 1) // self.characters_per_page + 1
        
        if self.current_page < max_pages - 1:
            self.current_page += 1
            embed = await self.create_assign_embed()
            await interaction.response.edit_message(embed=embed, view=self)
        else:
            await interaction.response.defer()
    
    @discord.ui.button(label="üè† Retour", style=discord.ButtonStyle.secondary, row=1)
    async def back_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Retour au menu principal"""
        embed = await self.parent_view.create_main_embed()
        await interaction.response.edit_message(embed=embed, view=self.parent_view)


class ChooseSeriesModal(discord.ui.Modal, title="üéØ Choisir S√©rie Cible"):
    """Modal pour choisir la s√©rie cible"""
    
    def __init__(self, bot, parent_view):
        super().__init__()
        self.bot = bot
        self.parent_view = parent_view
    
    series_name = discord.ui.TextInput(
        label="Nom de la S√©rie",
        placeholder="Ex: Jujutsu Kaisen",
        required=True,
        max_length=50
    )
    
    async def on_submit(self, interaction: discord.Interaction):
        self.parent_view.target_series = self.series_name.value.strip()
        embed = await self.parent_view.create_assign_embed()
        await interaction.response.edit_message(embed=embed, view=self.parent_view)


class SelectCharacterModal(discord.ui.Modal, title="‚¨ú S√©lectionner Personnage"):
    """Modal pour s√©lectionner un personnage par ID"""
    
    def __init__(self, bot, parent_view):
        super().__init__()
        self.bot = bot
        self.parent_view = parent_view
    
    character_id = discord.ui.TextInput(
        label="ID du Personnage",
        placeholder="Ex: 25",
        required=True,
        max_length=10
    )
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            char_id = int(self.character_id.value.strip())
            
            # V√©rifier que le personnage existe
            async with self.bot.db.db.execute("""
                SELECT name FROM characters WHERE id = ?
            """, (char_id,)) as cursor:
                result = await cursor.fetchone()
            
            if not result:
                embed = discord.Embed(
                    title="‚ùå Personnage Introuvable",
                    description=f"Aucun personnage avec l'ID {char_id}",
                    color=0xff0000
                )
                await interaction.response.edit_message(embed=embed, view=self.parent_view)
                return
            
            # Ajouter/retirer de la s√©lection
            if char_id in self.parent_view.selected_characters:
                self.parent_view.selected_characters.remove(char_id)
            else:
                self.parent_view.selected_characters.append(char_id)
            
            embed = await self.parent_view.create_assign_embed()
            await interaction.response.edit_message(embed=embed, view=self.parent_view)
            
        except ValueError:
            embed = discord.Embed(
                title="‚ùå ID Invalide",
                description="L'ID doit √™tre un nombre valide",
                color=0xff0000
            )
            await interaction.response.edit_message(embed=embed, view=self.parent_view)
        except Exception as e:
            logger.error(f"Erreur s√©lection personnage: {e}")
            embed = discord.Embed(
                title="‚ùå Erreur",
                description=f"Erreur: {str(e)}",
                color=0xff0000
            )
            await interaction.response.edit_message(embed=embed, view=self.parent_view)


class EditSeriesView(discord.ui.View):
    """Vue pour modifier une s√©rie existante"""
    
    def __init__(self, bot, user_id: int, parent_view):
        super().__init__(timeout=600)
        self.bot = bot
        self.user_id = user_id
        self.parent_view = parent_view
    
    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        return interaction.user.id == self.user_id
    
    async def create_edit_embed(self) -> discord.Embed:
        """Cr√©er l'embed de modification"""
        embed = discord.Embed(
            title="‚öôÔ∏è ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê„Äî M O D I F I E R   S √â R I E „Äï‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ‚öôÔ∏è",
            description="```\n‚óÜ Modifiez une s√©rie existante ‚óÜ\n```",
            color=BotConfig.RARITY_COLORS['Epic']
        )
        
        embed.add_field(
            name="üõ†Ô∏è Actions Disponibles",
            value=("```\n"
                   "üìù Renommer - Changer le nom de la s√©rie\n"
                   "‚ûï Ajouter - Ajouter des personnages\n"
                   "‚ûñ Retirer - Retirer des personnages\n"
                   "ü™ô Bonus - Modifier les bonus\n"
                   "```"),
            inline=False
        )
        
        return embed
    
    @discord.ui.button(label="üìù Renommer", style=discord.ButtonStyle.primary, row=0)
    async def rename_series_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Renommer une s√©rie"""
        modal = RenameSeriesModal(self.bot, self)
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="üè† Retour", style=discord.ButtonStyle.secondary, row=0)
    async def back_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Retour au menu principal"""
        embed = await self.parent_view.create_main_embed()
        await interaction.response.edit_message(embed=embed, view=self.parent_view)


class RenameSeriesModal(discord.ui.Modal, title="üìù Renommer S√©rie"):
    """Modal pour renommer une s√©rie"""
    
    def __init__(self, bot, parent_view):
        super().__init__()
        self.bot = bot
        self.parent_view = parent_view
    
    old_name = discord.ui.TextInput(
        label="Ancien Nom",
        placeholder="Ex: One Piece",
        required=True,
        max_length=50
    )
    
    new_name = discord.ui.TextInput(
        label="Nouveau Nom",
        placeholder="Ex: One Piece: New World",
        required=True,
        max_length=50
    )
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            old_name = self.old_name.value.strip()
            new_name = self.new_name.value.strip()
            
            # V√©rifier que l'ancienne s√©rie existe
            async with self.bot.db.db.execute("""
                SELECT COUNT(*) FROM characters WHERE anime = ?
            """, (old_name,)) as cursor:
                count = (await cursor.fetchone())[0]
            
            if count == 0:
                embed = discord.Embed(
                    title="‚ùå S√©rie Introuvable",
                    description=f"Aucune s√©rie nomm√©e '{old_name}'",
                    color=0xff0000
                )
                await interaction.response.edit_message(embed=embed, view=self.parent_view)
                return
            
            # V√©rifier que le nouveau nom n'existe pas d√©j√†
            async with self.bot.db.db.execute("""
                SELECT COUNT(*) FROM characters WHERE anime = ?
            """, (new_name,)) as cursor:
                exists = (await cursor.fetchone())[0] > 0
            
            if exists and new_name != old_name:
                embed = discord.Embed(
                    title="‚ùå Nom D√©j√† Utilis√©",
                    description=f"Une s√©rie nomm√©e '{new_name}' existe d√©j√†",
                    color=0xff0000
                )
                await interaction.response.edit_message(embed=embed, view=self.parent_view)
                return
            
            # Effectuer le renommage
            await self.bot.db.db.execute("""
                UPDATE characters SET anime = ? WHERE anime = ?
            """, (new_name, old_name))
            
            await self.bot.db.db.commit()
            
            embed = discord.Embed(
                title="‚úÖ Renommage R√©ussi",
                description=f"'{old_name}' ‚Üí '{new_name}'\n{count} personnages mis √† jour",
                color=0x00ff00
            )
            
            # Retour au menu principal
            main_embed = await self.parent_view.parent_view.create_main_embed()
            await interaction.response.edit_message(embed=main_embed, view=self.parent_view.parent_view)
            
        except Exception as e:
            logger.error(f"Erreur renommage s√©rie: {e}")
            embed = discord.Embed(
                title="‚ùå Erreur",
                description=f"Erreur: {str(e)}",
                color=0xff0000
            )
            await interaction.response.edit_message(embed=embed, view=self.parent_view)


class SeriesDetailsView(discord.ui.View):
    """Vue pour voir les d√©tails d'une s√©rie"""
    
    def __init__(self, bot, user_id: int, parent_view):
        super().__init__(timeout=600)
        self.bot = bot
        self.user_id = user_id
        self.parent_view = parent_view
        self.current_series = None
        self.current_page = 0
    
    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        return interaction.user.id == self.user_id
    
    async def create_details_embed(self) -> discord.Embed:
        """Cr√©er l'embed de d√©tails"""
        embed = discord.Embed(
            title="üìã ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê„Äî D √â T A I L S   S √â R I E „Äï‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üìã",
            description="```\n‚óÜ D√©tails complets de la s√©rie ‚óÜ\n```",
            color=BotConfig.RARITY_COLORS['Legendary']
        )
        
        if not self.current_series:
            embed.add_field(
                name="üéØ S√©lectionner S√©rie",
                value="```Utilisez le bouton ci-dessous pour choisir une s√©rie```",
                inline=False
            )
        else:
            # R√©cup√©rer les d√©tails de la s√©rie
            series_details = await self.get_series_details(self.current_series)
            
            if series_details:
                embed.add_field(
                    name=f"üé≠ {self.current_series}",
                    value=f"```{len(series_details['characters'])} personnages```",
                    inline=False
                )
                
                # Afficher les personnages par raret√©
                rarity_groups = {}
                for char in series_details['characters']:
                    rarity = char[1]
                    if rarity not in rarity_groups:
                        rarity_groups[rarity] = []
                    rarity_groups[rarity].append(char[0])
                
                for rarity in ['Fusion', 'Titan', 'Mythic', 'Legendary', 'Epic', 'Rare', 'Common']:
                    if rarity in rarity_groups:
                        emoji = BotConfig.RARITY_EMOJIS.get(rarity, '‚óÜ')
                        chars = ', '.join(rarity_groups[rarity])
                        embed.add_field(
                            name=f"{emoji} {rarity}",
                            value=f"```{chars}```",
                            inline=False
                        )
                
                # Afficher les bonus
                bonus = series_details.get('bonus')
                if bonus and bonus.get('bonus_type'):
                    embed.add_field(
                        name="ü™ô Bonus de S√©rie",
                        value=f"```+{bonus['bonus_value']}% {bonus['bonus_type']}```",
                        inline=True
                    )
        
        return embed
    
    async def get_series_details(self, series_name: str) -> Dict:
        """R√©cup√©rer les d√©tails complets d'une s√©rie"""
        try:
            async with self.bot.db.db.execute("""
                SELECT name, rarity FROM characters 
                WHERE anime = ?
                ORDER BY rarity DESC, name
            """, (series_name,)) as cursor:
                characters = await cursor.fetchall()
            
            bonus_data = await self.parent_view.get_series_bonus(series_name)
            
            return {
                'characters': characters,
                'bonus': bonus_data
            }
        except Exception as e:
            logger.error(f"Erreur d√©tails s√©rie: {e}")
            return {}
    
    @discord.ui.button(label="üéØ Choisir S√©rie", style=discord.ButtonStyle.primary, row=0)
    async def choose_series_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Choisir la s√©rie √† afficher"""
        modal = ChooseSeriesDetailsModal(self.bot, self)
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="üè† Retour", style=discord.ButtonStyle.secondary, row=0)
    async def back_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Retour au menu principal"""
        embed = await self.parent_view.create_main_embed()
        await interaction.response.edit_message(embed=embed, view=self.parent_view)


class ChooseSeriesDetailsModal(discord.ui.Modal, title="üéØ Choisir S√©rie"):
    """Modal pour choisir la s√©rie √† afficher"""
    
    def __init__(self, bot, parent_view):
        super().__init__()
        self.bot = bot
        self.parent_view = parent_view
    
    series_name = discord.ui.TextInput(
        label="Nom de la S√©rie",
        placeholder="Ex: Naruto",
        required=True,
        max_length=50
    )
    
    async def on_submit(self, interaction: discord.Interaction):
        series_name = self.series_name.value.strip()
        
        # V√©rifier que la s√©rie existe
        async with self.bot.db.db.execute("""
            SELECT COUNT(*) FROM characters WHERE anime = ?
        """, (series_name,)) as cursor:
            count = (await cursor.fetchone())[0]
        
        if count == 0:
            embed = discord.Embed(
                title="‚ùå S√©rie Introuvable",
                description=f"Aucune s√©rie nomm√©e '{series_name}'",
                color=0xff0000
            )
            await interaction.response.edit_message(embed=embed, view=self.parent_view)
            return
        
        self.parent_view.current_series = series_name
        embed = await self.parent_view.create_details_embed()
        await interaction.response.edit_message(embed=embed, view=self.parent_view)


class DeleteSeriesView(discord.ui.View):
    """Vue pour supprimer une s√©rie"""
    
    def __init__(self, bot, user_id: int, parent_view):
        super().__init__(timeout=600)
        self.bot = bot
        self.user_id = user_id
        self.parent_view = parent_view
    
    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        return interaction.user.id == self.user_id
    
    async def create_delete_embed(self) -> discord.Embed:
        """Cr√©er l'embed de suppression"""
        embed = discord.Embed(
            title="üóëÔ∏è ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê„Äî S U P P R I M E R   S √â R I E „Äï‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üóëÔ∏è",
            description="```\n‚ö†Ô∏è ATTENTION: Action irr√©versible! ‚ö†Ô∏è\n```",
            color=0xff0000
        )
        
        embed.add_field(
            name="üö® Important",
            value=("```\n"
                   "Supprimer une s√©rie retirera la s√©rie\n"
                   "de TOUS les personnages concern√©s.\n"
                   "Les personnages ne seront PAS supprim√©s,\n"
                   "mais perdront leur assignation de s√©rie.\n"
                   "```"),
            inline=False
        )
        
        return embed
    
    @discord.ui.button(label="üóëÔ∏è Confirmer Suppression", style=discord.ButtonStyle.danger, row=0)
    async def confirm_delete_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Confirmer la suppression"""
        modal = DeleteSeriesModal(self.bot, self)
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="üè† Retour", style=discord.ButtonStyle.secondary, row=0)
    async def back_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Retour au menu principal"""
        embed = await self.parent_view.create_main_embed()
        await interaction.response.edit_message(embed=embed, view=self.parent_view)


class DeleteSeriesModal(discord.ui.Modal, title="üóëÔ∏è Confirmer Suppression"):
    """Modal pour confirmer la suppression d'une s√©rie"""
    
    def __init__(self, bot, parent_view):
        super().__init__()
        self.bot = bot
        self.parent_view = parent_view
    
    series_name = discord.ui.TextInput(
        label="Nom de la S√©rie √† Supprimer",
        placeholder="Tapez exactement le nom de la s√©rie",
        required=True,
        max_length=50
    )
    
    confirmation = discord.ui.TextInput(
        label="Confirmation (tapez 'SUPPRIMER')",
        placeholder="SUPPRIMER",
        required=True,
        max_length=20
    )
    
    async def on_submit(self, interaction: discord.Interaction):
        series_name = self.series_name.value.strip()
        confirmation = self.confirmation.value.strip().upper()
        
        if confirmation != "SUPPRIMER":
            embed = discord.Embed(
                title="‚ùå Confirmation Invalide",
                description="Vous devez taper exactement 'SUPPRIMER'",
                color=0xff0000
            )
            await interaction.response.edit_message(embed=embed, view=self.parent_view)
            return
        
        try:
            # V√©rifier que la s√©rie existe et compter les personnages
            async with self.bot.db.db.execute("""
                SELECT COUNT(*) FROM characters WHERE anime = ?
            """, (series_name,)) as cursor:
                count = (await cursor.fetchone())[0]
            
            if count == 0:
                embed = discord.Embed(
                    title="‚ùå S√©rie Introuvable",
                    description=f"Aucune s√©rie nomm√©e '{series_name}'",
                    color=0xff0000
                )
                await interaction.response.edit_message(embed=embed, view=self.parent_view)
                return
            
            # Supprimer la s√©rie (mettre anime √† NULL)
            await self.bot.db.db.execute("""
                UPDATE characters SET anime = NULL WHERE anime = ?
            """, (series_name,))
            
            await self.bot.db.db.commit()
            
            embed = discord.Embed(
                title="‚úÖ S√©rie Supprim√©e",
                description=f"S√©rie '{series_name}' supprim√©e\n{count} personnages lib√©r√©s",
                color=0x00ff00
            )
            
            # Retour au menu principal
            main_embed = await self.parent_view.parent_view.create_main_embed()
            await interaction.response.edit_message(embed=main_embed, view=self.parent_view.parent_view)
            
        except Exception as e:
            logger.error(f"Erreur suppression s√©rie: {e}")
            embed = discord.Embed(
                title="‚ùå Erreur",
                description=f"Erreur: {str(e)}",
                color=0xff0000
            )
            await interaction.response.edit_message(embed=embed, view=self.parent_view)


async def setup_series_admin_commands(bot):
    """Configurer les commandes admin pour les s√©ries"""
    
    @bot.command(name='series')
    async def series_admin_command(ctx):
        """Commande admin pour g√©rer les s√©ries"""
        if not BotConfig.is_admin(ctx.author.id):
            await ctx.send(BotConfig.MESSAGES['admin_only'])
            return
        
        view = SeriesManagementView(bot, ctx.author.id)
        embed = await view.create_main_embed()
        await ctx.send(embed=embed, view=view)
        
    logger.info("Series admin commands setup completed")