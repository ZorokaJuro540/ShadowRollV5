"""
Legacy Admin Commands for Shadow Roll Bot
All traditional admin commands with proper error handling
"""

import discord
from discord.ext import commands
import logging
from typing import Optional
import asyncio
from datetime import datetime

from core.config import BotConfig
from modules.utils import format_number, get_display_name
from modules.admin_character_sync import sync_admin_characters

logger = logging.getLogger(__name__)

# Character selection view for lookcard command
class LookcardSelectionView(discord.ui.View):
    def __init__(self, characters, user_id, bot):
        super().__init__(timeout=60)
        self.characters = characters
        self.user_id = user_id
        self.bot = bot
        
        # Add buttons for each character (max 10)
        for i, char in enumerate(characters[:10]):
            button = discord.ui.Button(
                label=f"{i+1}. {char[1]} ({char[2]})",
                style=discord.ButtonStyle.secondary,
                custom_id=f"lookcard_char_{i}"
            )
            button.callback = self.create_callback(i)
            self.add_item(button)
    
    def create_callback(self, index):
        async def callback(interaction):
            if interaction.user.id != self.user_id:
                await interaction.response.send_message("‚ùå Vous ne pouvez pas utiliser cette s√©lection.", ephemeral=True)
                return
            
            row = self.characters[index]
            from core.models import Character
            character = Character(
                id=row[0],
                name=row[1],
                anime=row[2],
                rarity=row[3],
                value=row[4],
                image_url=row[5]
            )
            
            username = get_display_name(interaction.user)
            
            # Cr√©er la carte avec le style Shadow am√©lior√©
            embed = discord.Embed(
                title="üåå ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê„Äî C A R T E   P E R S O N N A G E „Äï‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üåå",
                description=f"```\n‚óÜ Consultation par: {username} ‚óÜ\n```",
                color=character.get_rarity_color()
            )
            
            embed.add_field(
                name=f"üåë ‚ïê‚ïê‚ïê„Äî {character.get_rarity_emoji()} {character.name} „Äï‚ïê‚ïê‚ïê üåë",
                value=(f"```\n"
                       f"Anime: {character.anime}\n"
                       f"Raret√©: {character.rarity}\n"
                       f"Valeur: {format_number(character.value)} Shadow Coins\n"
                       f"```"),
                inline=False
            )
            
            # Ajouter les chances d'obtention
            rarity_chance = BotConfig.RARITY_WEIGHTS.get(character.rarity, 0)
            embed.add_field(
                name="üìä Informations d'Invocation",
                value=(f"```\n"
                       f"Invocation: Disponible\n"
                       f"Fr√©quence: {rarity_chance}%\n"
                       f"Roll Standard: Oui\n"
                       f"```"),
                inline=True
            )
            
            if character.image_url and not character.image_url.startswith('https://i.imgur.com/example'):
                embed.set_image(url=character.image_url)
            
            embed.set_footer(
                text="Shadow Roll ‚Ä¢ Consultation de Personnage",
                icon_url=interaction.user.avatar.url if interaction.user.avatar else None
            )
            
            await interaction.response.edit_message(embed=embed, view=None)
        
        return callback
    
    async def on_timeout(self):
        # Disable all buttons when timeout
        for item in self.children:
            item.disabled = True

async def setup_legacy_admin_commands(bot):
    """Setup all legacy admin commands"""
    logger.info("Setting up legacy admin commands...")
    
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê COMMANDES DE BASE ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    @bot.command(name='syncchars', aliases=['syncpersonnages'])
    async def sync_characters_to_code(ctx):
        """Synchroniser tous les personnages vers le code - Admin seulement"""
        if not BotConfig.is_admin(ctx.author.id):
            await ctx.send("‚ùå Vous n'avez pas la permission d'utiliser cette commande.")
            return
        
        try:
            await ctx.send("üîÑ Synchronisation en cours...")
            
            # Synchroniser les personnages avec le code
            synced_count = await sync_admin_characters(bot.db)
            
            # V√©rifier les s√©ries manquantes
            cursor = await bot.db.db.execute("SELECT DISTINCT anime FROM characters")
            all_animes = [row[0] for row in await cursor.fetchall()]
            
            series_created = 0
            for anime in all_animes:
                # V√©rifier si la s√©rie existe
                cursor = await bot.db.db.execute(
                    "SELECT id FROM series WHERE LOWER(series_name) = LOWER(?)",
                    (anime,)
                )
                if not await cursor.fetchone():
                    await bot.db.auto_create_series(anime)
                    series_created += 1
            
            embed = discord.Embed(
                title="‚úÖ Synchronisation Termin√©e",
                description="Tous les personnages ont √©t√© synchronis√©s avec le code",
                color=0x27ae60
            )
            embed.add_field(
                name="üìä R√©sultats",
                value=f"**Personnages synchronis√©s:** {synced_count}\n**S√©ries cr√©√©es:** {series_created}",
                inline=False
            )
            
            await ctx.send(embed=embed)
            
        except Exception as e:
            logger.error(f"Error in syncchars: {e}")
            await ctx.send("‚ùå Erreur lors de la synchronisation.")
    
    @bot.command(name='fixbluelock', aliases=['addbluelock'])
    async def fix_bluelock_characters(ctx):
        """Ajouter tous les personnages Blue Lock manquants - Admin seulement"""
        if not BotConfig.is_admin(ctx.author.id):
            await ctx.send("‚ùå Vous n'avez pas la permission d'utiliser cette commande.")
            return
        
        try:
            await ctx.send("üîÑ Ajout des personnages Blue Lock manquants...")
            
            # D√©finir tous les personnages Blue Lock avec leurs vraies informations
            bluelock_characters = [
                ("Rin Itoshi", "Blue Lock", "Legendary", 1500, "https://static.wikia.nocookie.net/bluelock/images/d/d1/Rin_Itoshi_Anime_Profile.png"),
                ("Sae Itoshi", "Blue Lock", "Legendary", 1400, "https://static.wikia.nocookie.net/bluelock/images/5/5c/Sae_Itoshi_Anime_Profile.png"),
                ("Michael Kaiser", "Blue Lock", "Mythic", 3000, "https://static.wikia.nocookie.net/bluelock/images/4/4c/Michael_Kaiser_Anime_Profile.png"),
                ("Alexis Ness", "Blue Lock", "Epic", 800, "https://static.wikia.nocookie.net/bluelock/images/b/b9/Alexis_Ness_Anime_Profile.png"),
                ("Yukimiya Kenyu", "Blue Lock", "Epic", 750, "https://static.wikia.nocookie.net/bluelock/images/e/e5/Yukimiya_Kenyu_Anime_Profile.png"),
                ("Otoya Eita", "Blue Lock", "Rare", 400, "https://static.wikia.nocookie.net/bluelock/images/a/a6/Otoya_Eita_Anime_Profile.png"),
                ("Karasu Tabito", "Blue Lock", "Rare", 450, "https://static.wikia.nocookie.net/bluelock/images/7/7f/Karasu_Tabito_Anime_Profile.png"),
                ("Hiori Yo", "Blue Lock", "Rare", 350, "https://static.wikia.nocookie.net/bluelock/images/2/2a/Hiori_Yo_Anime_Profile.png"),
                ("Zantetsu Tsurugi", "Blue Lock", "Common", 150, "https://static.wikia.nocookie.net/bluelock/images/1/1e/Zantetsu_Tsurugi_Anime_Profile.png"),
                ("Ikki Niko", "Blue Lock", "Common", 120, "https://static.wikia.nocookie.net/bluelock/images/c/c8/Ikki_Niko_Anime_Profile.png"),
                ("Anri Teieri", "Blue Lock", "Rare", 300, "https://static.wikia.nocookie.net/bluelock/images/8/8c/Anri_Teieri_Anime_Profile.png"),
            ]
            
            added_count = 0
            updated_count = 0
            
            for name, anime, rarity, value, image_url in bluelock_characters:
                # V√©rifier si le personnage existe d√©j√†
                cursor = await bot.db.db.execute(
                    "SELECT id FROM characters WHERE LOWER(name) = LOWER(?)",
                    (name,)
                )
                existing = await cursor.fetchone()
                
                if existing:
                    # Mettre √† jour le personnage existant
                    await bot.db.db.execute(
                        "UPDATE characters SET anime=?, rarity=?, value=?, image_url=? WHERE LOWER(name) = LOWER(?)",
                        (anime, rarity, value, image_url, name)
                    )
                    updated_count += 1
                else:
                    # Cr√©er le nouveau personnage
                    await bot.db.db.execute(
                        "INSERT INTO characters (name, anime, rarity, value, image_url) VALUES (?, ?, ?, ?, ?)",
                        (name, anime, rarity, value, image_url)
                    )
                    added_count += 1
            
            await bot.db.db.commit()
            
            # Cr√©er automatiquement la s√©rie Blue Lock
            await bot.db.auto_create_series("Blue Lock")
            
            # Synchroniser avec le code
            synced_count = await sync_admin_characters(bot.db)
            
            embed = discord.Embed(
                title="‚úÖ Personnages Blue Lock Ajout√©s",
                description="Tous les personnages Blue Lock ont √©t√© ajout√©s avec succ√®s",
                color=0x27ae60
            )
            embed.add_field(
                name="üìä R√©sultats",
                value=f"**Nouveaux:** {added_count}\n**Mis √† jour:** {updated_count}\n**Synchronis√©s:** {synced_count}",
                inline=False
            )
            
            await ctx.send(embed=embed)
            
        except Exception as e:
            logger.error(f"Error in fixbluelock: {e}")
            await ctx.send("‚ùå Erreur lors de l'ajout des personnages Blue Lock.")
    
    @bot.command(name='createevolve', aliases=['addevolve'])
    async def create_evolve_character(ctx, base_character_name: str, *, anime_name: str = None):
        """Cr√©er automatiquement un personnage Evolve - Admin seulement"""
        if not BotConfig.is_admin(ctx.author.id):
            await ctx.send("‚ùå Vous n'avez pas la permission d'utiliser cette commande.")
            return
        
        try:
            await ctx.send("üîÆ Cr√©ation du personnage Evolve en cours...")
            
            # Chercher le personnage de base
            cursor = await bot.db.db.execute(
                "SELECT name, anime, rarity, value, image_url FROM characters WHERE LOWER(name) = LOWER(?)",
                (base_character_name,)
            )
            base_char = await cursor.fetchone()
            
            if not base_char:
                await ctx.send(f"‚ùå Personnage de base '{base_character_name}' introuvable.")
                return
            
            base_name, base_anime, base_rarity, base_value, base_image = base_char
            evolved_name = f"{base_name} Evolve"
            
            # Utiliser l'anime fourni ou celui du personnage de base
            final_anime = anime_name if anime_name else base_anime
            
            # Calculer la valeur √©volu√©e (valeur de base * 15)
            evolved_value = base_value * 15
            
            # V√©rifier si le personnage Evolve existe d√©j√†
            cursor = await bot.db.db.execute(
                "SELECT id FROM characters WHERE LOWER(name) = LOWER(?)",
                (evolved_name,)
            )
            if await cursor.fetchone():
                await ctx.send(f"‚ùå Le personnage **{evolved_name}** existe d√©j√†.")
                return
            
            # Cr√©er le personnage Evolve
            await bot.db.db.execute(
                "INSERT INTO characters (name, anime, rarity, value, image_url) VALUES (?, ?, 'Evolve', ?, ?)",
                (evolved_name, final_anime, evolved_value, base_image)
            )
            await bot.db.db.commit()
            
            # Cr√©er automatiquement la s√©rie
            await bot.db.auto_create_series(final_anime)
            
            # Synchroniser avec le code
            synced_count = await sync_admin_characters(bot.db)
            
            embed = discord.Embed(
                title="‚úÖ Personnage Evolve Cr√©√©",
                description=f"**{evolved_name}** a √©t√© cr√©√© avec succ√®s",
                color=BotConfig.RARITY_COLORS['Evolve']
            )
            embed.add_field(
                name="üìä D√©tails",
                value=f"**Personnage de base:** {base_name}\n**Anime:** {final_anime}\n**Valeur:** {format_number(evolved_value)} pi√®ces",
                inline=False
            )
            embed.add_field(
                name="üîÆ Craft",
                value=f"**Recette cr√©√©e:** {base_name} x10 ‚Üí {evolved_name}\n**Synchronis√©s:** {synced_count} personnages",
                inline=False
            )
            
            if base_image:
                embed.set_thumbnail(url=base_image)
            
            await ctx.send(embed=embed)
            
        except Exception as e:
            logger.error(f"Error in createevolve: {e}")
            await ctx.send("‚ùå Erreur lors de la cr√©ation du personnage Evolve.")
    

    @bot.command(name='lookcard', aliases=['previewcard', 'cardpreview'])
    async def look_card(ctx, *, character_name: str):
        """Afficher la carte d'un personnage - Disponible pour tous"""
        # Commande accessible √† tous les utilisateurs
        
        try:
            # Recherche du personnage - exact match first, then partial
            cursor = await bot.db.db.execute(
                "SELECT id, name, anime, rarity, value, image_url FROM characters WHERE LOWER(name) = LOWER(?) ORDER BY name",
                (character_name,)
            )
            char_rows = await cursor.fetchall()
            
            # If no exact match, try partial match
            if not char_rows:
                cursor = await bot.db.db.execute(
                    "SELECT id, name, anime, rarity, value, image_url FROM characters WHERE LOWER(name) LIKE LOWER(?) ORDER BY name",
                    (f"%{character_name}%",)
                )
                char_rows = await cursor.fetchall()
            
            if not char_rows:
                await ctx.send(f"‚ùå Aucun personnage trouv√© pour '{character_name}'")
                return
            
            if len(char_rows) > 1:
                # Multiple characters found - use button selection
                embed = discord.Embed(
                    title="üîç Plusieurs personnages trouv√©s",
                    description="Cliquez sur le bouton correspondant au personnage que vous voulez voir:",
                    color=0x3498db
                )
                
                # Add character list to embed for reference
                char_list = "\n".join([f"**{i+1}.** {char[1]} ({char[2]}) - {char[3]}" for i, char in enumerate(char_rows[:10])])
                embed.add_field(name="Personnages disponibles:", value=char_list, inline=False)
                
                view = LookcardSelectionView(char_rows, ctx.author.id, bot)
                await ctx.send(embed=embed, view=view)
                return
            
            # Un seul r√©sultat
            row = char_rows[0]
            from core.models import Character
            character = Character(
                id=row[0],
                name=row[1], 
                anime=row[2],
                rarity=row[3],
                value=row[4],
                image_url=row[5]
            )
            
            # Obtenir les informations utilisateur pour un affichage personnalis√©
            username = get_display_name(ctx.author)
            
            # Cr√©er la carte avec le style Shadow am√©lior√©
            embed = discord.Embed(
                title="üåå ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê„Äî C A R T E   P E R S O N N A G E „Äï‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üåå",
                description=f"```\n‚óÜ Consultation par: {username} ‚óÜ\n```",
                color=character.get_rarity_color()
            )
            
            embed.add_field(
                name=f"üåë ‚ïê‚ïê‚ïê„Äî {character.get_rarity_emoji()} {character.name} „Äï‚ïê‚ïê‚ïê üåë",
                value=(f"```\n"
                       f"Anime: {character.anime}\n"
                       f"Raret√©: {character.rarity}\n" 
                       f"Valeur: {format_number(character.value)} SC\n"
                       f"```\n"
                       f"üé≠ **S√©rie:** {character.anime}\n"
                       f"üíé **Raret√©:** {character.rarity} {character.get_rarity_emoji()}\n"
                       f"ü™ô **Valeur:** {format_number(character.value)} Shadow Coins"),
                inline=False
            )
            
            # Ajouter les statistiques d'invocation
            rarity_chance = BotConfig.RARITY_WEIGHTS.get(character.rarity, 0)
            embed.add_field(
                name="üìä Statistiques d'Invocation",
                value=(f"```\n"
                       f"Chance: {rarity_chance}%\n"
                       f"ID Syst√®me: {character.id}\n"
                       f"```"),
                inline=True
            )
            
            # Ajouter informations sur la raret√©
            if character.rarity == 'Evolve':
                embed.add_field(
                    name="üîÆ Raret√© Sp√©ciale",
                    value=(f"```\n"
                           f"Type: Craft exclusif\n"
                           f"Obtention: √âvolution uniquement\n"
                           f"Invocation: Impossible\n"
                           f"```"),
                    inline=True
                )
            else:
                embed.add_field(
                    name="üé≤ Disponibilit√©",
                    value=(f"```\n"
                           f"Invocation: Disponible\n"
                           f"Fr√©quence: {rarity_chance}%\n"
                           f"Roll Standard: Oui\n"
                           f"```"),
                    inline=True
                )
            
            if character.image_url and not character.image_url.startswith('https://i.imgur.com/example'):
                embed.set_image(url=character.image_url)
            
            embed.set_footer(
                text="Shadow Roll ‚Ä¢ Consultation de Personnage",
                icon_url=ctx.author.avatar.url if ctx.author.avatar else None
            )
            
            await ctx.send(embed=embed)
            
        except Exception as e:
            logger.error(f"Error in lookcard command: {e}")
            await ctx.send("‚ùå Erreur lors de l'affichage de la carte.")
    
    @bot.command(name='testcard')
    async def test_card(ctx, *, character_name: str = "Naruto"):
        """Test simple pour v√©rifier les commandes admin"""
        if not BotConfig.is_admin(ctx.author.id):
            await ctx.send("‚ùå Vous n'√™tes pas admin.")
            return
        
        try:
            cursor = await bot.db.db.execute(
                "SELECT id, name, anime, rarity, value FROM characters WHERE LOWER(name) LIKE LOWER(?) LIMIT 1",
                (f"%{character_name}%",)
            )
            result = await cursor.fetchone()
            
            if result:
                await ctx.send(f"‚úÖ Trouv√©: **{result[1]}** ({result[2]}) - {result[3]} - {result[4]} SC")
            else:
                await ctx.send(f"‚ùå Aucun personnage trouv√© pour '{character_name}'")
                
        except Exception as e:
            await ctx.send(f"‚ùå Erreur: {e}")
    
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê GESTION DES JOUEURS ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    @bot.command(name='givecoins', aliases=['addcoins', 'coins'])
    async def give_coins(ctx, target, amount: int, *, reason="Attribution admin"):
        """Donner des pi√®ces √† un joueur - Admin seulement"""
        if not BotConfig.is_admin(ctx.author.id):
            await ctx.send("‚ùå Vous n'avez pas la permission d'utiliser cette commande.")
            return
        
        try:
            # Trouver le joueur
            user_id = None
            if target.startswith('<@') and target.endswith('>'):
                user_id = int(target[2:-1].replace('!', ''))
            elif target.isdigit():
                user_id = int(target)
            else:
                # Recherche par nom
                cursor = await bot.db.db.execute(
                    "SELECT user_id FROM players WHERE LOWER(username) LIKE LOWER(?)",
                    (f"%{target}%",)
                )
                result = await cursor.fetchone()
                if result:
                    user_id = result[0]
            
            if not user_id:
                await ctx.send(f"‚ùå Joueur '{target}' introuvable.")
                return
            
            # Obtenir ou cr√©er le joueur
            player = await bot.db.get_or_create_player(user_id, target)
            new_coins = player.coins + amount
            
            # Mettre √† jour les pi√®ces
            await bot.db.update_player_coins(user_id, new_coins)
            
            embed = discord.Embed(
                title="‚úÖ Pi√®ces Attribu√©es",
                description=f"**{format_number(amount)} pi√®ces** donn√©es √† **{player.username}**",
                color=0x27ae60
            )
            embed.add_field(
                name="üìä D√©tails",
                value=f"**Avant:** {format_number(player.coins)} pi√®ces\n**Apr√®s:** {format_number(new_coins)} pi√®ces\n**Raison:** {reason}",
                inline=False
            )
            
            await ctx.send(embed=embed)
            
        except ValueError:
            await ctx.send("‚ùå Montant invalide. Utilisez un nombre.")
        except Exception as e:
            logger.error(f"Error in givecoins: {e}")
            await ctx.send("‚ùå Erreur lors de l'attribution des pi√®ces.")
    
    @bot.command(name='removecoins', aliases=['takecoins'])
    async def remove_coins(ctx, target, amount: int, *, reason="Retrait admin"):
        """Retirer des pi√®ces √† un joueur - Admin seulement"""
        if not BotConfig.is_admin(ctx.author.id):
            await ctx.send("‚ùå Vous n'avez pas la permission d'utiliser cette commande.")
            return
        
        try:
            # Logique similaire √† givecoins mais en soustrayant
            user_id = None
            if target.startswith('<@') and target.endswith('>'):
                user_id = int(target[2:-1].replace('!', ''))
            elif target.isdigit():
                user_id = int(target)
            else:
                cursor = await bot.db.db.execute(
                    "SELECT user_id FROM players WHERE LOWER(username) LIKE LOWER(?)",
                    (f"%{target}%",)
                )
                result = await cursor.fetchone()
                if result:
                    user_id = result[0]
            
            if not user_id:
                await ctx.send(f"‚ùå Joueur '{target}' introuvable.")
                return
            
            player = await bot.db.get_or_create_player(user_id, target)
            new_coins = max(0, player.coins - amount)  # Ne pas aller en n√©gatif
            
            await bot.db.update_player_coins(user_id, new_coins)
            
            embed = discord.Embed(
                title="‚úÖ Pi√®ces Retir√©es",
                description=f"**{format_number(amount)} pi√®ces** retir√©es √† **{player.username}**",
                color=0xe74c3c
            )
            embed.add_field(
                name="üìä D√©tails",
                value=f"**Avant:** {format_number(player.coins)} pi√®ces\n**Apr√®s:** {format_number(new_coins)} pi√®ces\n**Raison:** {reason}",
                inline=False
            )
            
            await ctx.send(embed=embed)
            
        except ValueError:
            await ctx.send("‚ùå Montant invalide. Utilisez un nombre.")
        except Exception as e:
            logger.error(f"Error in removecoins: {e}")
            await ctx.send("‚ùå Erreur lors du retrait des pi√®ces.")
    
    @bot.command(name='giveallcoins', aliases=['distributecoins'])
    async def give_all_coins(ctx, amount: int, *, reason="Event admin"):
        """Donner des pi√®ces √† tous les joueurs - Admin seulement"""
        if not BotConfig.is_admin(ctx.author.id):
            await ctx.send("‚ùå Vous n'avez pas la permission d'utiliser cette commande.")
            return
        
        try:
            # Compter les joueurs actifs
            cursor = await bot.db.db.execute("SELECT COUNT(*) FROM players WHERE is_banned = 0")
            player_count = (await cursor.fetchone())[0]
            
            if player_count == 0:
                await ctx.send("‚ùå Aucun joueur actif trouv√©.")
                return
            
            # Distribuer les pi√®ces
            await bot.db.db.execute(
                "UPDATE players SET coins = coins + ? WHERE is_banned = 0",
                (amount,)
            )
            await bot.db.db.commit()
            
            embed = discord.Embed(
                title="‚úÖ Distribution R√©ussie",
                description=f"**{format_number(amount)} pi√®ces** distribu√©es √† **{player_count:,} joueurs**",
                color=0x27ae60
            )
            embed.add_field(
                name="üìä D√©tails",
                value=f"**Total distribu√©:** {format_number(amount * player_count)} pi√®ces\n**Raison:** {reason}",
                inline=False
            )
            
            await ctx.send(embed=embed)
            
        except ValueError:
            await ctx.send("‚ùå Montant invalide. Utilisez un nombre.")
        except Exception as e:
            logger.error(f"Error in giveallcoins: {e}")
            await ctx.send("‚ùå Erreur lors de la distribution.")
    
    @bot.command(name='banuser', aliases=['ban'])
    async def ban_user(ctx, target, *, reason="Ban admin"):
        """Bannir un utilisateur - Admin seulement"""
        if not BotConfig.is_admin(ctx.author.id):
            await ctx.send("‚ùå Vous n'avez pas la permission d'utiliser cette commande.")
            return
        
        try:
            user_id = None
            if target.startswith('<@') and target.endswith('>'):
                user_id = int(target[2:-1].replace('!', ''))
            elif target.isdigit():
                user_id = int(target)
            else:
                cursor = await bot.db.db.execute(
                    "SELECT user_id FROM players WHERE LOWER(username) LIKE LOWER(?)",
                    (f"%{target}%",)
                )
                result = await cursor.fetchone()
                if result:
                    user_id = result[0]
            
            if not user_id:
                await ctx.send(f"‚ùå Joueur '{target}' introuvable.")
                return
            
            # Bannir l'utilisateur
            await bot.db.ban_user(user_id, target)
            
            embed = discord.Embed(
                title="‚úÖ Utilisateur Banni",
                description=f"**{target}** a √©t√© banni du syst√®me",
                color=0xe74c3c
            )
            embed.add_field(
                name="üìä D√©tails",
                value=f"**Utilisateur:** {target}\n**Raison:** {reason}",
                inline=False
            )
            
            await ctx.send(embed=embed)
            
        except Exception as e:
            logger.error(f"Error in banuser: {e}")
            await ctx.send("‚ùå Erreur lors du bannissement.")
    
    @bot.command(name='unbanuser', aliases=['unban'])
    async def unban_user(ctx, target, *, reason="Unban admin"):
        """D√©bannir un utilisateur - Admin seulement"""
        if not BotConfig.is_admin(ctx.author.id):
            await ctx.send("‚ùå Vous n'avez pas la permission d'utiliser cette commande.")
            return
        
        try:
            user_id = None
            if target.startswith('<@') and target.endswith('>'):
                user_id = int(target[2:-1].replace('!', ''))
            elif target.isdigit():
                user_id = int(target)
            else:
                cursor = await bot.db.db.execute(
                    "SELECT user_id FROM players WHERE LOWER(username) LIKE LOWER(?)",
                    (f"%{target}%",)
                )
                result = await cursor.fetchone()
                if result:
                    user_id = result[0]
            
            if not user_id:
                await ctx.send(f"‚ùå Joueur '{target}' introuvable.")
                return
            
            # D√©bannir l'utilisateur
            await bot.db.unban_user(user_id)
            
            embed = discord.Embed(
                title="‚úÖ Utilisateur D√©banni",
                description=f"**{target}** a √©t√© d√©banni du syst√®me",
                color=0x27ae60
            )
            embed.add_field(
                name="üìä D√©tails",
                value=f"**Utilisateur:** {target}\n**Raison:** {reason}",
                inline=False
            )
            
            await ctx.send(embed=embed)
            
        except Exception as e:
            logger.error(f"Error in unbanuser: {e}")
            await ctx.send("‚ùå Erreur lors du d√©bannissement.")
    
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê GESTION DES PERSONNAGES ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    @bot.command(name='createchar', aliases=['addchar', 'newchar'])
    async def create_character(ctx, name: str, rarity: str, anime: str, value: int, image_url: str = ""):
        """Cr√©er un nouveau personnage - Admin seulement"""
        if not BotConfig.is_admin(ctx.author.id):
            await ctx.send("‚ùå Vous n'avez pas la permission d'utiliser cette commande.")
            return
        
        try:
            # V√©rifier la raret√©
            valid_rarities = ['Common', 'Rare', 'Epic', 'Legendary', 'Mythic', 'Titan', 'Fusion', 'Secret']
            if rarity not in valid_rarities:
                await ctx.send(f"‚ùå Raret√© invalide. Utilisez: {', '.join(valid_rarities)}")
                return
            
            # V√©rifier si le personnage existe
            cursor = await bot.db.db.execute(
                "SELECT id FROM characters WHERE LOWER(name) = LOWER(?)",
                (name,)
            )
            if await cursor.fetchone():
                await ctx.send(f"‚ùå Le personnage **{name}** existe d√©j√†.")
                return
            
            # Cr√©er le personnage
            final_image_url = image_url if image_url else None
            await bot.db.db.execute(
                "INSERT INTO characters (name, anime, rarity, value, image_url) VALUES (?, ?, ?, ?, ?)",
                (name, anime, rarity, value, final_image_url)
            )
            await bot.db.db.commit()
            
            # Cr√©er automatiquement la s√©rie si elle n'existe pas
            await bot.db.auto_create_series(anime)
            
            # Si c'est un personnage Evolve, v√©rifier que le personnage de base existe
            craft_msg = ""
            if rarity == "Evolve":
                base_name = name.replace(" Evolve", "")
                cursor = await bot.db.db.execute(
                    "SELECT COUNT(*) FROM characters WHERE name = ? AND anime = ? AND rarity != 'Evolve'",
                    (base_name, anime)
                )
                base_exists = (await cursor.fetchone())[0] > 0
                
                if base_exists:
                    craft_msg = f"\nüîÆ Recette de craft automatiquement cr√©√©e: {base_name} x10 ‚Üí {name}"
                else:
                    craft_msg = f"\n‚ö†Ô∏è Attention: Personnage de base '{base_name}' introuvable pour le craft"
            
            # Synchroniser avec le code pour persistence
            try:
                synced_count = await sync_admin_characters(bot.db)
                sync_msg = f"\nüîÑ {synced_count} personnages synchronis√©s avec le code"
            except Exception as sync_error:
                logger.error(f"Erreur de synchronisation: {sync_error}")
                sync_msg = "\n‚ö†Ô∏è Synchronisation avec le code √©chou√©e"
            
            embed = discord.Embed(
                title="‚úÖ Personnage Cr√©√©",
                description=f"**{name}** a √©t√© cr√©√© avec succ√®s{sync_msg}{craft_msg}",
                color=0x27ae60
            )
            embed.add_field(
                name="üìä D√©tails",
                value=f"**Anime:** {anime}\n**Raret√©:** {rarity}\n**Valeur:** {format_number(value)} pi√®ces",
                inline=False
            )
            
            if final_image_url:
                embed.set_thumbnail(url=final_image_url)
            
            await ctx.send(embed=embed)
            
        except ValueError:
            await ctx.send("‚ùå Valeur invalide. Utilisez un nombre pour la valeur.")
        except Exception as e:
            logger.error(f"Error in createchar: {e}")
            await ctx.send("‚ùå Erreur lors de la cr√©ation du personnage.")
    
    @bot.command(name='deletechar', aliases=['removechar'])
    async def delete_character(ctx, *, character_input: str):
        """Supprimer un personnage par nom ou ID - Admin seulement"""
        if not BotConfig.is_admin(ctx.author.id):
            await ctx.send("‚ùå Vous n'avez pas la permission d'utiliser cette commande.")
            return
        
        try:
            # V√©rifier si l'input est un ID num√©rique
            result = None
            search_type = ""
            
            if character_input.isdigit():
                # Recherche par ID
                char_id = int(character_input)
                cursor = await bot.db.db.execute(
                    "SELECT id, name, anime FROM characters WHERE id = ?",
                    (char_id,)
                )
                result = await cursor.fetchone()
                search_type = f"ID {char_id}"
            else:
                # Recherche par nom (exacte d'abord)
                cursor = await bot.db.db.execute(
                    "SELECT id, name, anime FROM characters WHERE LOWER(name) = LOWER(?)",
                    (character_input,)
                )
                result = await cursor.fetchone()
                
                if not result:
                    # Si pas trouv√© exactement, recherche partielle
                    cursor = await bot.db.db.execute(
                        "SELECT id, name, anime FROM characters WHERE name LIKE ?",
                        (f"%{character_input}%",)
                    )
                    result = await cursor.fetchone()
                search_type = f"nom '{character_input}'"
            
            if not result:
                await ctx.send(f"‚ùå Personnage avec {search_type} introuvable.")
                return
            
            char_id, name, anime = result
            
            # Compter les possessions
            cursor = await bot.db.db.execute(
                "SELECT COUNT(*) FROM inventory WHERE character_id = ?",
                (char_id,)
            )
            owned_count = (await cursor.fetchone())[0]
            
            # Supprimer de l'inventaire
            await bot.db.db.execute("DELETE FROM inventory WHERE character_id = ?", (char_id,))
            
            # Supprimer le personnage
            await bot.db.db.execute("DELETE FROM characters WHERE id = ?", (char_id,))
            await bot.db.db.commit()
            
            embed = discord.Embed(
                title="‚úÖ Personnage Supprim√©",
                description=f"**{name}** (ID: {char_id}) a √©t√© supprim√© du syst√®me",
                color=0xe74c3c
            )
            embed.add_field(
                name="üìä Impact",
                value=f"**Anime:** {anime}\n**Retir√© de {owned_count:,} inventaires**",
                inline=False
            )
            
            await ctx.send(embed=embed)
            
        except Exception as e:
            logger.error(f"Error in deletechar: {e}")
            await ctx.send("‚ùå Erreur lors de la suppression.")
    
    @bot.command(name='deletecharid', aliases=['removecharid'])
    async def delete_character_by_id(ctx, character_id: int):
        """Supprimer un personnage par ID uniquement - Admin seulement"""
        if not BotConfig.is_admin(ctx.author.id):
            await ctx.send("‚ùå Vous n'avez pas la permission d'utiliser cette commande.")
            return
        
        try:
            # Trouver le personnage par ID
            cursor = await bot.db.db.execute(
                "SELECT id, name, anime FROM characters WHERE id = ?",
                (character_id,)
            )
            result = await cursor.fetchone()
            
            if not result:
                await ctx.send(f"‚ùå Aucun personnage trouv√© avec l'ID {character_id}.")
                return
            
            char_id, name, anime = result
            
            # Compter les possessions
            cursor = await bot.db.db.execute(
                "SELECT COUNT(*) FROM inventory WHERE character_id = ?",
                (char_id,)
            )
            owned_count = (await cursor.fetchone())[0]
            
            # Supprimer de l'inventaire
            await bot.db.db.execute("DELETE FROM inventory WHERE character_id = ?", (char_id,))
            
            # Supprimer le personnage
            await bot.db.db.execute("DELETE FROM characters WHERE id = ?", (char_id,))
            await bot.db.db.commit()
            
            embed = discord.Embed(
                title="‚úÖ Personnage Supprim√© par ID",
                description=f"**{name}** (ID: {char_id}) a √©t√© supprim√© du syst√®me",
                color=0xe74c3c
            )
            embed.add_field(
                name="üìä Impact",
                value=f"**Anime:** {anime}\n**Retir√© de {owned_count:,} inventaires**",
                inline=False
            )
            
            await ctx.send(embed=embed)
            
        except ValueError:
            await ctx.send("‚ùå L'ID doit √™tre un nombre valide.")
        except Exception as e:
            logger.error(f"Error in deletecharid: {e}")
            await ctx.send("‚ùå Erreur lors de la suppression.")
    
    @bot.command(name='forcepull', aliases=['givepull'])
    async def force_pull(ctx, target, *, character_or_rarity: str):
        """Forcer un pull pour un joueur - Admin seulement"""
        if not BotConfig.is_admin(ctx.author.id):
            await ctx.send("‚ùå Vous n'avez pas la permission d'utiliser cette commande.")
            return
        
        try:
            # Trouver le joueur
            user_id = None
            if target.startswith('<@') and target.endswith('>'):
                user_id = int(target[2:-1].replace('!', ''))
            elif target.isdigit():
                user_id = int(target)
            else:
                cursor = await bot.db.db.execute(
                    "SELECT user_id FROM players WHERE LOWER(username) LIKE LOWER(?)",
                    (f"%{target}%",)
                )
                result = await cursor.fetchone()
                if result:
                    user_id = result[0]
            
            if not user_id:
                await ctx.send(f"‚ùå Joueur '{target}' introuvable.")
                return
            
            # D√©terminer si c'est un personnage ou une raret√©
            character = None
            valid_rarities = ['Common', 'Rare', 'Epic', 'Legendary', 'Mythic', 'Titan', 'Fusion', 'Secret']
            
            if character_or_rarity in valid_rarities:
                # Tirer dans la raret√©
                cursor = await bot.db.db.execute(
                    "SELECT id, name, anime, rarity, value, image_url FROM characters WHERE rarity = ? ORDER BY RANDOM() LIMIT 1",
                    (character_or_rarity,)
                )
                char_data = await cursor.fetchone()
                
                if not char_data:
                    await ctx.send(f"‚ùå Aucun personnage de raret√© **{character_or_rarity}** trouv√©.")
                    return
            else:
                # Rechercher le personnage
                cursor = await bot.db.db.execute(
                    "SELECT id, name, anime, rarity, value, image_url FROM characters WHERE LOWER(name) LIKE LOWER(?)",
                    (f"%{character_or_rarity}%",)
                )
                char_results = await cursor.fetchall()
                
                if not char_results:
                    await ctx.send(f"‚ùå Personnage '{character_or_rarity}' introuvable.")
                    return
                
                if len(char_results) > 1:
                    char_list = [f"**{row[1]}** ({row[2]}) - {row[3]}" for row in char_results[:5]]
                    await ctx.send(f"‚ùå Plusieurs personnages trouv√©s:\n" + "\n".join(char_list))
                    return
                
                char_data = char_results[0]
            
            # Cr√©er l'objet Character
            from core.models import Character
            character = Character(
                id=char_data[0],
                name=char_data[1],
                anime=char_data[2],
                rarity=char_data[3],
                value=char_data[4],
                image_url=char_data[5]
            )
            
            # Ajouter √† l'inventaire
            await bot.db.add_character_to_inventory(user_id, character.id)
            
            embed = discord.Embed(
                title="‚úÖ Pull Forc√© R√©ussi",
                description=f"**{character.name}** a √©t√© ajout√© √† l'inventaire de **{target}**",
                color=character.get_rarity_color()
            )
            embed.add_field(
                name=f"{character.get_rarity_emoji()} {character.name}",
                value=f"**Anime:** {character.anime}\n**Raret√©:** {character.rarity}\n**Valeur:** {format_number(character.value)} pi√®ces",
                inline=False
            )
            
            if character.image_url:
                embed.set_thumbnail(url=character.image_url)
            
            await ctx.send(embed=embed)
            
        except Exception as e:
            logger.error(f"Error in forcepull: {e}")
            await ctx.send("‚ùå Erreur lors du pull forc√©.")
    
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê STATISTIQUES ET INFORMATIONS ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    @bot.command(name='playerstats', aliases=['stats'])
    async def player_stats(ctx):
        """Afficher les statistiques des joueurs - Admin seulement"""
        if not BotConfig.is_admin(ctx.author.id):
            await ctx.send("‚ùå Vous n'avez pas la permission d'utiliser cette commande.")
            return
        
        try:
            # Statistiques g√©n√©rales
            cursor = await bot.db.db.execute("""
                SELECT 
                    COUNT(*) as total_players,
                    SUM(coins) as total_coins,
                    AVG(coins) as avg_coins,
                    MAX(coins) as max_coins,
                    SUM(total_rerolls) as total_rerolls
                FROM players
            """)
            stats = await cursor.fetchone()
            
            embed = discord.Embed(
                title="üìä Statistiques des Joueurs",
                color=0x3498db
            )
            
            embed.add_field(
                name="üë• Joueurs",
                value=f"**Total:** {stats[0]:,}\n**Actifs:** {stats[0]:,}",
                inline=True
            )
            
            embed.add_field(
                name="ü™ô √âconomie",
                value=f"**Total:** {format_number(stats[1] or 0)} pi√®ces\n**Moyenne:** {format_number(int(stats[2] or 0))} pi√®ces\n**Record:** {format_number(stats[3] or 0)} pi√®ces",
                inline=True
            )
            
            embed.add_field(
                name="üé≤ Activit√©",
                value=f"**Total rerolls:** {stats[4] or 0:,}",
                inline=True
            )
            
            # Top 5 joueurs
            cursor = await bot.db.db.execute(
                "SELECT username, coins FROM players ORDER BY coins DESC LIMIT 5"
            )
            top_players = await cursor.fetchall()
            
            if top_players:
                top_list = []
                medals = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£"]
                for i, (username, coins) in enumerate(top_players):
                    top_list.append(f"{medals[i]} {username}: {format_number(coins)} pi√®ces")
                
                embed.add_field(
                    name="üèÜ Top 5 Joueurs",
                    value="\n".join(top_list),
                    inline=False
                )
            
            await ctx.send(embed=embed)
            
        except Exception as e:
            logger.error(f"Error in playerstats: {e}")
            await ctx.send("‚ùå Erreur lors de l'affichage des statistiques.")
    
    @bot.command(name='systeminfo', aliases=['sysinfo'])
    async def system_info(ctx):
        """Informations syst√®me - Admin seulement"""
        if not BotConfig.is_admin(ctx.author.id):
            await ctx.send("‚ùå Vous n'avez pas la permission d'utiliser cette commande.")
            return
        
        try:
            embed = discord.Embed(
                title="‚öôÔ∏è Informations Syst√®me",
                color=0x9370DB
            )
            
            # Informations bot
            guilds = len(bot.guilds)
            total_members = sum(guild.member_count for guild in bot.guilds)
            
            embed.add_field(
                name="ü§ñ Bot",
                value=f"**Version:** {BotConfig.VERSION}\n**Serveurs:** {guilds:,}\n**Membres:** {total_members:,}\n**Latence:** {round(bot.latency * 1000)}ms",
                inline=True
            )
            
            # Statistiques DB
            cursor = await bot.db.db.execute("SELECT COUNT(*) FROM characters")
            char_count = (await cursor.fetchone())[0]
            
            cursor = await bot.db.db.execute("SELECT COUNT(*) FROM players")
            player_count = (await cursor.fetchone())[0]
            
            cursor = await bot.db.db.execute("SELECT COUNT(*) FROM inventory")
            inv_count = (await cursor.fetchone())[0]
            
            embed.add_field(
                name="üóÉÔ∏è Base de Donn√©es",
                value=f"**Personnages:** {char_count:,}\n**Joueurs:** {player_count:,}\n**Inventaires:** {inv_count:,}",
                inline=True
            )
            
            # Configuration
            embed.add_field(
                name="‚öôÔ∏è Configuration",
                value=f"**Pr√©fixe:** {BotConfig.COMMAND_PREFIX}\n**Co√ªt reroll:** {BotConfig.REROLL_COST}\n**Cooldown:** {BotConfig.REROLL_COOLDOWN}s",
                inline=True
            )
            
            await ctx.send(embed=embed)
            
        except Exception as e:
            logger.error(f"Error in systeminfo: {e}")
            await ctx.send("‚ùå Erreur lors de l'affichage des informations syst√®me.")
    
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê UTILITAIRES ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    @bot.command(name='resetplayer', aliases=['resetuser'])
    async def reset_player(ctx, target, confirm: str = None):
        """Reset complet d'un joueur - Admin seulement - DANGER"""
        if not BotConfig.is_admin(ctx.author.id):
            await ctx.send("‚ùå Vous n'avez pas la permission d'utiliser cette commande.")
            return
        
        if confirm != "CONFIRM":
            await ctx.send("‚ùå Pour confirmer, utilisez: `!resetplayer <joueur> CONFIRM`")
            return
        
        try:
            user_id = None
            if target.startswith('<@') and target.endswith('>'):
                user_id = int(target[2:-1].replace('!', ''))
            elif target.isdigit():
                user_id = int(target)
            else:
                cursor = await bot.db.db.execute(
                    "SELECT user_id FROM players WHERE LOWER(username) LIKE LOWER(?)",
                    (f"%{target}%",)
                )
                result = await cursor.fetchone()
                if result:
                    user_id = result[0]
            
            if not user_id:
                await ctx.send(f"‚ùå Joueur '{target}' introuvable.")
                return
            
            # Reset complet
            await bot.db.db.execute(
                "UPDATE players SET coins = ?, total_rerolls = 0, last_reroll = NULL, last_daily = NULL WHERE user_id = ?",
                (BotConfig.STARTING_COINS, user_id)
            )
            
            await bot.db.db.execute("DELETE FROM inventory WHERE user_id = ?", (user_id,))
            await bot.db.db.execute("DELETE FROM player_achievements WHERE user_id = ?", (user_id,))
            await bot.db.db.commit()
            
            embed = discord.Embed(
                title="‚úÖ Joueur Reset",
                description=f"**{target}** a √©t√© compl√®tement reset",
                color=0x27ae60
            )
            embed.add_field(
                name="üìä Actions",
                value=f"‚Ä¢ Pi√®ces: {BotConfig.STARTING_COINS:,}\n‚Ä¢ Inventaire vid√©\n‚Ä¢ Achievements supprim√©s\n‚Ä¢ Statistiques reset",
                inline=False
            )
            
            await ctx.send(embed=embed)
            
        except Exception as e:
            logger.error(f"Error in resetplayer: {e}")
            await ctx.send("‚ùå Erreur lors du reset.")
    
    @bot.command(name='viewprofile', aliases=['profile'])
    async def view_profile(ctx, target):
        """Voir le profil d√©taill√© d'un joueur - Admin seulement"""
        if not BotConfig.is_admin(ctx.author.id):
            await ctx.send("‚ùå Vous n'avez pas la permission d'utiliser cette commande.")
            return
        
        try:
            user_id = None
            if target.startswith('<@') and target.endswith('>'):
                user_id = int(target[2:-1].replace('!', ''))
            elif target.isdigit():
                user_id = int(target)
            else:
                cursor = await bot.db.db.execute(
                    "SELECT user_id FROM players WHERE LOWER(username) LIKE LOWER(?)",
                    (f"%{target}%",)
                )
                result = await cursor.fetchone()
                if result:
                    user_id = result[0]
            
            if not user_id:
                await ctx.send(f"‚ùå Joueur '{target}' introuvable.")
                return
            
            # R√©cup√©rer les infos du joueur
            cursor = await bot.db.db.execute(
                "SELECT user_id, username, coins, total_rerolls, last_reroll, last_daily, is_banned FROM players WHERE user_id = ?",
                (user_id,)
            )
            player_data = await cursor.fetchone()
            
            if not player_data:
                await ctx.send(f"‚ùå Aucune donn√©e trouv√©e pour '{target}'.")
                return
            
            user_id, username, coins, rerolls, last_reroll, last_daily, is_banned = player_data
            
            embed = discord.Embed(
                title=f"üë§ Profil de {username}",
                color=0xe74c3c if is_banned else 0x27ae60
            )
            
            # Informations de base
            status = "üö´ Banni" if is_banned else "‚úÖ Actif"
            embed.add_field(
                name="üìä Informations",
                value=f"**ID:** {user_id}\n**Statut:** {status}\n**Pi√®ces:** {format_number(coins)}\n**Rerolls:** {rerolls:,}",
                inline=False
            )
            
            # Statistiques de collection
            cursor = await bot.db.db.execute(
                "SELECT COUNT(*), COUNT(DISTINCT character_id) FROM inventory WHERE user_id = ?",
                (user_id,)
            )
            inv_stats = await cursor.fetchone()
            total_items, unique_chars = inv_stats
            
            embed.add_field(
                name="üé¥ Collection",
                value=f"**Total objets:** {total_items:,}\n**Personnages uniques:** {unique_chars:,}",
                inline=True
            )
            
            # Activit√©
            embed.add_field(
                name="‚è∞ Activit√©",
                value=f"**Dernier reroll:** {last_reroll or 'Jamais'}\n**Dernier daily:** {last_daily or 'Jamais'}",
                inline=True
            )
            
            await ctx.send(embed=embed)
            
        except Exception as e:
            logger.error(f"Error in viewprofile: {e}")
            await ctx.send("‚ùå Erreur lors de l'affichage du profil.")
    
    # Character selection view for addimage command
    class CharacterSelectionView(discord.ui.View):
        def __init__(self, characters, image_url, user_id):
            super().__init__(timeout=60)
            self.characters = characters
            self.image_url = image_url
            self.user_id = user_id
            
            # Add buttons for each character (max 10)
            for i, char in enumerate(characters[:10]):
                button = discord.ui.Button(
                    label=f"{i+1}. {char[1]} ({char[2]})",
                    style=discord.ButtonStyle.secondary,
                    custom_id=f"select_char_{i}"
                )
                button.callback = self.create_callback(i)
                self.add_item(button)
        
        def create_callback(self, index):
            async def callback(interaction):
                if interaction.user.id != self.user_id:
                    await interaction.response.send_message("‚ùå Vous ne pouvez pas utiliser cette s√©lection.", ephemeral=True)
                    return
                
                char_id, name, anime = self.characters[index]
                
                try:
                    # Update the image
                    await bot.db.db.execute(
                        "UPDATE characters SET image_url = ? WHERE id = ?",
                        (self.image_url, char_id)
                    )
                    await bot.db.db.commit()
                    
                    # Confirmation
                    embed = discord.Embed(
                        title="‚úÖ Image Mise √† Jour",
                        description=f"L'image de **{name}** ({anime}) a √©t√© mise √† jour avec succ√®s!",
                        color=0x27ae60
                    )
                    embed.set_thumbnail(url=self.image_url)
                    
                    await interaction.response.edit_message(embed=embed, view=None)
                    
                except Exception as e:
                    logger.error(f"Error updating image: {e}")
                    await interaction.response.send_message("‚ùå Erreur lors de la mise √† jour de l'image.", ephemeral=True)
            
            return callback
        
        async def on_timeout(self):
            # Disable all buttons when timeout
            for item in self.children:
                item.disabled = True

    @bot.command(name='addimage', aliases=['setimage'])
    async def add_image(ctx, character_name: str, image_url: str):
        """Ajouter/modifier l'image d'un personnage - Admin seulement"""
        if not BotConfig.is_admin(ctx.author.id):
            await ctx.send("‚ùå Vous n'avez pas la permission d'utiliser cette commande.")
            return
        
        try:
            # Rechercher le personnage
            cursor = await bot.db.db.execute(
                "SELECT id, name, anime FROM characters WHERE LOWER(name) LIKE LOWER(?)",
                (f"%{character_name}%",)
            )
            results = await cursor.fetchall()
            
            if not results:
                await ctx.send(f"‚ùå Personnage '{character_name}' introuvable.")
                return
            
            if len(results) > 1:
                # Multiple characters found - use button selection
                embed = discord.Embed(
                    title="üîç Plusieurs personnages trouv√©s",
                    description="Cliquez sur le bouton correspondant au personnage que vous voulez modifier:",
                    color=0x3498db
                )
                
                # Add character list to embed for reference
                char_list = "\n".join([f"**{i+1}.** {char[1]} ({char[2]})" for i, char in enumerate(results[:10])])
                embed.add_field(name="Personnages disponibles:", value=char_list, inline=False)
                
                view = CharacterSelectionView(results, image_url, ctx.author.id)
                await ctx.send(embed=embed, view=view)
                return
            
            # Single character found
            char_id, name, anime = results[0]
            
            # Update the image
            await bot.db.db.execute(
                "UPDATE characters SET image_url = ? WHERE id = ?",
                (image_url, char_id)
            )
            await bot.db.db.commit()
            
            embed = discord.Embed(
                title="‚úÖ Image Mise √† Jour",
                description=f"L'image de **{name}** a √©t√© mise √† jour",
                color=0x27ae60
            )
            embed.add_field(
                name="üìä Info",
                value=f"**Personnage:** {name} ({anime})",
                inline=False
            )
            embed.set_thumbnail(url=image_url)
            
            await ctx.send(embed=embed)
            
        except Exception as e:
            logger.error(f"Error in addimage: {e}")
            await ctx.send("‚ùå Erreur lors de la mise √† jour de l'image.")
    
    logger.info("Legacy admin commands setup completed")