"""
Shadow Roll Bot - Navigation Menu Style Fortnite
Syst√®me de navigation horizontale avec fl√®ches
"""

import discord
import asyncio
from typing import Dict, List, Optional
from core.config import BotConfig
from modules.utils import format_number, get_display_name
import logging

logger = logging.getLogger(__name__)

class NavigationMenuView(discord.ui.View):
    """Menu de navigation horizontal style Fortnite"""
    
    def __init__(self, bot, user_id: int):
        super().__init__(timeout=300)
        self.bot = bot
        self.user_id = user_id
        self.current_page = 0
        
        # D√©finir toutes les pages du menu
        self.pages = [
            {
                "name": "üè† Accueil",
                "description": "Menu principal Shadow Roll",
                "buttons": [
                    {"label": "üë§ Profil", "action": "profile"},
                    {"label": "üé≤ Invocation", "action": "summon"},
                    {"label": "üéÅ B√©n√©diction", "action": "daily"},
                    {"label": "‚ùì Guide", "action": "guide"}
                ]
            },
            {
                "name": "üé≤ Invocation",
                "description": "Invoquer des personnages",
                "buttons": [
                    {"label": "üé≤ Invocation Simple", "action": "single_summon"},
                    {"label": "üé≤ Invocation x10", "action": "multi_summon"},
                    {"label": "üçÄ Avec Potion", "action": "potion_summon"},
                    {"label": "üíé Invocation Premium", "action": "premium_summon"}
                ]
            },
            {
                "name": "üß™ Recherche",
                "description": "Traquer un personnage sp√©cifique",
                "buttons": [
                    {"label": "üîç Rechercher", "action": "search_character"},
                    {"label": "üéØ Mes Hunts", "action": "my_hunts"},
                    {"label": "üìä Progression", "action": "hunt_progress"},
                    {"label": "‚≠ê Hunt Premium", "action": "premium_hunt"}
                ]
            },
            {
                "name": "üéí Collection",
                "description": "Voir vos personnages",
                "buttons": [
                    {"label": "üë• Mes Personnages", "action": "inventory"},
                    {"label": "üèÜ S√©ries", "action": "series"},
                    {"label": "‚ö° √âquipement", "action": "equipment"},
                    {"label": "üìà Statistiques", "action": "stats"}
                ]
            },
            {
                "name": "üîÆ Craft",
                "description": "√âvolution des personnages",
                "buttons": [
                    {"label": "üîÆ Craft Simple", "action": "craft"},
                    {"label": "‚ö° Craft Premium", "action": "premium_craft"},
                    {"label": "üìã Recettes", "action": "recipes"},
                    {"label": "üéØ Craft Automatique", "action": "auto_craft"}
                ]
            },
            {
                "name": "üîÑ Trade",
                "description": "√âchanger avec d'autres joueurs",
                "buttons": [
                    {"label": "üîÑ Nouveau Trade", "action": "new_trade"},
                    {"label": "üìã Mes Trades", "action": "my_trades"},
                    {"label": "üè™ Marketplace", "action": "marketplace"},
                    {"label": "üìä Historique", "action": "trade_history"}
                ]
            },
            {
                "name": "üõí Boutique",
                "description": "Articles premium rotatifs",
                "buttons": [
                    {"label": "‚ú® Featured", "action": "featured_shop"},
                    {"label": "üóìÔ∏è Daily", "action": "daily_shop"},
                    {"label": "üéÅ Packs", "action": "packs_shop"},
                    {"label": "üîÑ Rotation", "action": "force_rotation"}
                ]
            },
            {
                "name": "ü™ô Vendre",
                "description": "Revendre vos personnages",
                "buttons": [
                    {"label": "ü™ô Vente Rapide", "action": "quick_sell"},
                    {"label": "üíé Vente Premium", "action": "premium_sell"},
                    {"label": "üìä Valeurs", "action": "market_values"},
                    {"label": "üîÑ Vente Multiple", "action": "bulk_sell"}
                ]
            },
            {
                "name": "üéØ Succ√®s",
                "description": "R√©compenses d'exploits",
                "buttons": [
                    {"label": "üèÜ Mes Succ√®s", "action": "achievements"},
                    {"label": "üìà Progression", "action": "achievement_progress"},
                    {"label": "ü™ô R√©compenses", "action": "claim_rewards"},
                    {"label": "üéñÔ∏è Badges", "action": "badges"}
                ]
            },
            {
                "name": "üèÜ Classement",
                "description": "Tableau des ma√Ætres",
                "buttons": [
                    {"label": "üëë Top Global", "action": "global_leaderboard"},
                    {"label": "üéØ Top Mensuel", "action": "monthly_leaderboard"},
                    {"label": "‚ö° Top √âquipement", "action": "equipment_leaderboard"},
                    {"label": "üìä Mes Rangs", "action": "my_ranks"}
                ]
            },
            {
                "name": "üëë Titres",
                "description": "Titres personnalis√©s",
                "buttons": [
                    {"label": "üëë Mes Titres", "action": "my_titles"},
                    {"label": "üîì D√©bloquer", "action": "unlock_titles"},
                    {"label": "‚ö° Bonus", "action": "title_bonuses"},
                    {"label": "üé® Personnaliser", "action": "customize_titles"}
                ]
            }
        ]
        
        self.update_buttons()
    
    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        return interaction.user.id == self.user_id
    
    def update_buttons(self):
        """Mettre √† jour les boutons selon la page actuelle"""
        self.clear_items()
        
        # Premi√®re ligne : Navigation avec fl√®ches
        # Fl√®che gauche
        if self.current_page > 0:
            left_arrow = discord.ui.Button(
                label="‚óÄÔ∏è",
                style=discord.ButtonStyle.secondary,
                row=0,
                custom_id="nav_left"
            )
            left_arrow.callback = self.nav_left
            self.add_item(left_arrow)
        
        # Indicateur de page actuelle
        current_page_btn = discord.ui.Button(
            label=f"{self.pages[self.current_page]['name']} ({self.current_page + 1}/{len(self.pages)})",
            style=discord.ButtonStyle.primary,
            row=0,
            disabled=True
        )
        self.add_item(current_page_btn)
        
        # Fl√®che droite
        if self.current_page < len(self.pages) - 1:
            right_arrow = discord.ui.Button(
                label="‚ñ∂Ô∏è",
                style=discord.ButtonStyle.secondary,
                row=0,
                custom_id="nav_right"
            )
            right_arrow.callback = self.nav_right
            self.add_item(right_arrow)
        
        # Boutons de la page actuelle (lignes 2 et 3) - Couleurs drapeau fran√ßais pour les 3 premiers
        current_page_data = self.pages[self.current_page]
        for i, button_data in enumerate(current_page_data["buttons"]):
            row = 1 if i < 2 else 2  # 2 boutons par ligne
            
            # Appliquer les couleurs du drapeau fran√ßais pour les 3 premi√®res pages
            if self.current_page == 0 and button_data["action"] == "profile":  # Profil - Bleu
                button_style = discord.ButtonStyle.primary
            elif self.current_page == 1 and button_data["action"] in ["single_summon", "multi_summon"]:  # Invocation - Blanc
                button_style = discord.ButtonStyle.secondary
            elif self.current_page == 2:  # Recherche - Rouge
                button_style = discord.ButtonStyle.danger
            else:
                # Style par d√©faut pour les autres boutons
                button_style = discord.ButtonStyle.success if button_data["action"] in ["summon", "single_summon"] else discord.ButtonStyle.secondary
            
            btn = discord.ui.Button(
                label=button_data["label"],
                style=button_style,
                row=row,
                custom_id=button_data["action"]
            )
            
            # Assigner le callback dynamiquement
            btn.callback = self.create_button_callback(button_data["action"])
            self.add_item(btn)
        
        # Bouton retour √† l'accueil (toujours visible)
        if self.current_page != 0:
            home_btn = discord.ui.Button(
                label="üè† Accueil",
                style=discord.ButtonStyle.primary,
                row=2,
                custom_id="home"
            )
            home_btn.callback = self.go_home
            self.add_item(home_btn)
    
    def create_button_callback(self, action: str):
        """Cr√©er un callback dynamique pour chaque bouton"""
        async def button_callback(interaction: discord.Interaction):
            await self.handle_action(interaction, action)
        return button_callback
    
    async def nav_left(self, interaction: discord.Interaction):
        """Navigation vers la gauche"""
        if self.current_page > 0:
            self.current_page -= 1
            self.update_buttons()
            await interaction.response.defer()
            embed = await self.create_navigation_embed()
            await interaction.edit_original_response(embed=embed, view=self)
    
    async def nav_right(self, interaction: discord.Interaction):
        """Navigation vers la droite"""
        if self.current_page < len(self.pages) - 1:
            self.current_page += 1
            self.update_buttons()
            await interaction.response.defer()
            embed = await self.create_navigation_embed()
            await interaction.edit_original_response(embed=embed, view=self)
    
    async def go_home(self, interaction: discord.Interaction):
        """Retour √† l'accueil"""
        self.current_page = 0
        self.update_buttons()
        await interaction.response.defer()
        embed = await self.create_navigation_embed()
        await interaction.edit_original_response(embed=embed, view=self)
    
    async def handle_action(self, interaction: discord.Interaction, action: str):
        """G√©rer les actions des boutons"""
        await interaction.response.defer()
        
        # Utiliser l'ancien menu pour toutes les actions (pour l'instant)
        from modules.menu import ShadowMenuView, create_main_menu_embed
        
        # Actions sp√©cifiques qui redirigent directement
        if action == "profile":
            from modules.menu import ProfileView
            view = ProfileView(self.bot, self.user_id)
            embed = await view.create_profile_embed()
            await interaction.edit_original_response(embed=embed, view=view)
            
        elif action in ["summon", "single_summon"]:
            # Rediriger vers le menu classique puis vers invocation
            view = ShadowMenuView(self.bot, self.user_id)
            embed = await create_main_menu_embed(self.bot, self.user_id)
            await interaction.edit_original_response(embed=embed, view=view)
            await interaction.followup.send("‚úÖ Cliquez sur üé≤ Invocation dans le menu ci-dessous", ephemeral=True)
            
        elif action == "daily":
            from modules.menu import DailyView
            view = DailyView(self.bot, self.user_id)
            embed = await view.claim_daily_reward()
            await interaction.edit_original_response(embed=embed, view=view)
            
        elif action == "guide":
            from modules.guide import GuideView
            view = GuideView(self.bot, self.user_id)
            embed = await view.create_guide_embed()
            await interaction.edit_original_response(embed=embed, view=view)
            
        else:
            # Pour toutes les autres actions, revenir au menu Shadow Roll classique
            view = ShadowMenuView(self.bot, self.user_id)
            embed = await create_main_menu_embed(self.bot, self.user_id)
            await interaction.edit_original_response(embed=embed, view=view)
            
            # Informer l'utilisateur de l'action demand√©e
            action_names = {
                "search_character": "üß™ Recherche",
                "inventory": "üéí Collection",
                "craft": "üîÆ Craft",
                "new_trade": "üîÑ Trade",
                "featured_shop": "üõí Boutique",
                "daily_shop": "üõí Boutique",
                "quick_sell": "ü™ô Vendre",
                "achievements": "üéØ Succ√®s",
                "global_leaderboard": "üèÜ Classement",
                "my_titles": "üëë Titres"
            }
            
            action_name = action_names.get(action, action)
            await interaction.followup.send(f"‚úÖ Cliquez sur {action_name} dans le menu ci-dessous", ephemeral=True)
    
    async def create_navigation_embed(self) -> discord.Embed:
        """Cr√©er l'embed de navigation"""
        try:
            player = await self.bot.db.get_or_create_player(self.user_id, f"User_{self.user_id}")
            username = get_display_name(player)
            
            current_page_data = self.pages[self.current_page]
            
            embed = discord.Embed(
                title=f"{current_page_data['name']} ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê",
                description=f"```\n‚óÜ {username} - {format_number(player.coins)} SC ‚óÜ\n{current_page_data['description']}\n```",
                color=BotConfig.RARITY_COLORS['Epic']
            )
            
            # Ajouter les options disponibles
            options_text = ""
            for i, button_data in enumerate(current_page_data["buttons"], 1):
                options_text += f"{button_data['label']}\n"
            
            embed.add_field(
                name="üéØ ‚ïê‚ïê‚ïê„Äî Options Disponibles „Äï‚ïê‚ïê‚ïê üéØ",
                value=f"```\n{options_text}```",
                inline=False
            )
            
            # Navigation info
            embed.add_field(
                name="üß≠ Navigation",
                value=f"```\n‚óÄÔ∏è Pr√©c√©dent  |  Page {self.current_page + 1}/{len(self.pages)}  |  Suivant ‚ñ∂Ô∏è\n```",
                inline=False
            )
            
            embed.set_footer(
                text=f"Shadow Roll ‚Ä¢ Navigation Style Fortnite",
                icon_url=self.bot.user.avatar.url if self.bot.user.avatar else None
            )
            
            return embed
            
        except Exception as e:
            logger.error(f"Error creating navigation embed: {e}")
            return discord.Embed(
                title="‚ùå Erreur",
                description="Impossible de cr√©er le menu de navigation",
                color=0xff0000
            )


async def create_navigation_menu_embed(bot, user_id: int) -> discord.Embed:
    """Cr√©er l'embed du menu de navigation principal"""
    try:
        player = await bot.db.get_or_create_player(user_id, f"User_{user_id}")
        username = get_display_name(player)
        
        embed = discord.Embed(
            title="üè† Accueil ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê",
            description=f"```\n‚óÜ Bienvenue {username} - {format_number(player.coins)} SC ‚óÜ\nMenu principal Shadow Roll\n```",
            color=BotConfig.RARITY_COLORS['Epic']
        )
        
        embed.add_field(
            name="üéØ ‚ïê‚ïê‚ïê„Äî Options Disponibles „Äï‚ïê‚ïê‚ïê üéØ",
            value="```\nüë§ Profil\nüé≤ Invocation\nüéÅ B√©n√©diction\n‚ùì Guide\n```",
            inline=False
        )
        
        embed.add_field(
            name="üß≠ Navigation",
            value="```\n‚óÄÔ∏è Pr√©c√©dent  |  Page 1/11  |  Suivant ‚ñ∂Ô∏è\n```",
            inline=False
        )
        
        embed.set_footer(
            text="Shadow Roll ‚Ä¢ Navigation Style Fortnite",
            icon_url=bot.user.avatar.url if bot.user.avatar else None
        )
        
        return embed
        
    except Exception as e:
        logger.error(f"Error creating navigation menu embed: {e}")
        return discord.Embed(
            title="‚ùå Erreur",
            description="Impossible de cr√©er le menu principal",
            color=0xff0000
        )