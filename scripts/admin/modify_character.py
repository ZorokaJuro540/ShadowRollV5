"""
Script pour modifier un personnage existant dans Shadow Roll Bot
Permet de changer le nom, la raret√©, la valeur, l'anime ou l'image d'un personnage
"""

import asyncio
import aiosqlite
import json
from datetime import datetime
from character_manager import CharacterManager

async def modify_character():
    """Interface interactive pour modifier un personnage"""
    
    print("üåå Shadow Roll - Modification de Personnage")
    print("=" * 50)
    
    # Initialiser le gestionnaire
    manager = CharacterManager()
    await manager.initialize()
    
    # Rechercher le personnage √† modifier
    search_term = input("Nom du personnage √† modifier: ").strip()
    characters = await manager.search_characters(search_term)
    
    if not characters:
        print(f"‚ùå Aucun personnage trouv√© pour '{search_term}'")
        return
    
    if len(characters) > 1:
        print(f"\nüîç {len(characters)} personnages trouv√©s:")
        for i, char in enumerate(characters, 1):
            print(f"{i}. {char['name']} ({char['anime']}) - {char['rarity']}")
        
        try:
            choice = int(input("Choisissez le num√©ro du personnage: ")) - 1
            if 0 <= choice < len(characters):
                character = characters[choice]
            else:
                print("‚ùå Choix invalide")
                return
        except ValueError:
            print("‚ùå Veuillez entrer un num√©ro valide")
            return
    else:
        character = characters[0]
    
    print(f"\nüìã Personnage s√©lectionn√©:")
    print(f"   Nom: {character['name']}")
    print(f"   Anime: {character['anime']}")
    print(f"   Raret√©: {character['rarity']}")
    print(f"   Valeur: {character['value']} SC")
    print(f"   Image: {'Oui' if character.get('image_url') else 'Non'}")
    
    # Menu de modification
    print(f"\nüîß Que voulez-vous modifier?")
    print("1. Nom")
    print("2. Anime")
    print("3. Raret√©")
    print("4. Valeur")
    print("5. Image URL")
    print("6. Tout modifier")
    print("0. Annuler")
    
    try:
        choice = int(input("Votre choix: "))
    except ValueError:
        print("‚ùå Choix invalide")
        return
    
    if choice == 0:
        print("Modification annul√©e")
        return
    
    # Collecter les nouvelles valeurs
    new_values = {}
    
    if choice in [1, 6]:  # Nom
        new_name = input(f"Nouveau nom [{character['name']}]: ").strip()
        if new_name:
            new_values['name'] = new_name
    
    if choice in [2, 6]:  # Anime
        new_anime = input(f"Nouvel anime [{character['anime']}]: ").strip()
        if new_anime:
            new_values['anime'] = new_anime
    
    if choice in [3, 6]:  # Raret√©
        rarities = ['Common', 'Rare', 'Epic', 'Legendary', 'Mythical', 'Titan', 'Duo', 'Secret', 'Evolve']
        print(f"Raret√©s disponibles: {', '.join(rarities)}")
        new_rarity = input(f"Nouvelle raret√© [{character['rarity']}]: ").strip()
        if new_rarity and new_rarity in rarities:
            new_values['rarity'] = new_rarity
        elif new_rarity:
            print(f"‚ùå Raret√© invalide. Utilisez: {', '.join(rarities)}")
            return
    
    if choice in [4, 6]:  # Valeur
        try:
            new_value_input = input(f"Nouvelle valeur [{character['value']}]: ").strip()
            if new_value_input:
                new_values['value'] = int(new_value_input)
        except ValueError:
            print("‚ùå La valeur doit √™tre un nombre entier")
            return
    
    if choice in [5, 6]:  # Image
        new_image = input(f"Nouvelle URL d'image [{character.get('image_url', 'Aucune')}]: ").strip()
        if new_image:
            new_values['image_url'] = new_image
    
    if not new_values:
        print("Aucune modification sp√©cifi√©e")
        return
    
    # Confirmation
    print(f"\n‚úÖ Modifications √† appliquer:")
    for key, value in new_values.items():
        print(f"   {key}: {character.get(key, 'N/A')} ‚Üí {value}")
    
    confirm = input("Confirmer les modifications? (o/N): ").strip().lower()
    if confirm not in ['o', 'oui', 'y', 'yes']:
        print("Modification annul√©e")
        return
    
    # Appliquer les modifications
    success = await apply_modifications(character['id'], new_values, manager)
    
    if success:
        print("‚úÖ Personnage modifi√© avec succ√®s!")
        print("üìÅ Modifications sauvegard√©es de mani√®re permanente")
    else:
        print("‚ùå Erreur lors de la modification")

async def apply_modifications(character_id: int, new_values: dict, manager: CharacterManager):
    """Appliquer les modifications √† un personnage"""
    try:
        # Construire la requ√™te SQL
        set_clauses = []
        values = []
        
        for key, value in new_values.items():
            set_clauses.append(f"{key} = ?")
            values.append(value)
        
        values.append(character_id)
        
        # Mettre √† jour en base de donn√©es
        async with aiosqlite.connect(manager.db_path) as db:
            await db.execute(
                f"UPDATE characters SET {', '.join(set_clauses)} WHERE id = ?",
                values
            )
            await db.commit()
        
        # Mettre √† jour le fichier JSON
        try:
            with open(manager.characters_file, 'r', encoding='utf-8') as f:
                characters_data = json.load(f)
            
            # Trouver et modifier le personnage dans le JSON
            for char in characters_data["characters"]:
                if char["id"] == character_id:
                    for key, value in new_values.items():
                        char[key] = value
                    char["last_updated"] = datetime.now().isoformat()
                    char["modified_by"] = "admin_script"
                    break
            
            characters_data["last_sync"] = datetime.now().isoformat()
            
            # Sauvegarder
            with open(manager.characters_file, 'w', encoding='utf-8') as f:
                json.dump(characters_data, f, indent=2, ensure_ascii=False)
            
            print(f"üìä Base de donn√©es et fichier JSON mis √† jour")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la mise √† jour du JSON: {e}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la modification: {e}")
        return False

async def quick_modify(character_name: str, **modifications):
    """Modification rapide via param√®tres"""
    manager = CharacterManager()
    await manager.initialize()
    
    characters = await manager.search_characters(character_name)
    
    if not characters:
        print(f"‚ùå Personnage '{character_name}' non trouv√©")
        return False
    
    if len(characters) > 1:
        print(f"‚ùå Plusieurs personnages trouv√©s pour '{character_name}'. Soyez plus sp√©cifique.")
        return False
    
    character = characters[0]
    success = await apply_modifications(character['id'], modifications, manager)
    
    if success:
        print(f"‚úÖ {character['name']} modifi√© avec succ√®s")
        for key, value in modifications.items():
            print(f"   {key}: {value}")
    
    return success

# Exemples d'utilisation directe
async def examples():
    """Exemples de modifications rapides"""
    
    # Changer la raret√© d'un personnage
    # await quick_modify("Naruto", rarity="Mythical")
    
    # Changer le nom et la valeur
    # await quick_modify("Goku", name="Son Goku", value=2000)
    
    # Changer l'anime d'appartenance
    # await quick_modify("Luffy", anime="One Piece Updated")
    
    # Ajouter une image
    # await quick_modify("Sasuke", image_url="https://nouvelle-image.jpg")
    
    pass

if __name__ == "__main__":
    asyncio.run(modify_character())