"""
Script de d√©marrage avec health check pour l'h√©bergement externe
D√©marre le bot et un serveur health check en parall√®le
"""
import asyncio
import logging
import os
from main import main as bot_main
from health_check import HealthCheckServer, send_heartbeat

logger = logging.getLogger('start_with_healthcheck')

async def main():
    """D√©marrer le bot avec health check"""
    
    # Configuration du logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    logger.info("üöÄ D√©marrage du bot avec health check...")
    
    # D√©marrer le serveur health check
    port = int(os.getenv('PORT', 8080))
    health_server = HealthCheckServer(port)
    runner = await health_server.start_server()
    
    # Mettre √† jour le statut
    health_server.bot_status = "starting"
    
    # Fonction pour envoyer des heartbeats p√©riodiques
    async def heartbeat_task():
        while True:
            try:
                await send_heartbeat("running")
                await asyncio.sleep(30)  # Heartbeat toutes les 30 secondes
            except Exception as e:
                logger.debug(f"Erreur heartbeat: {e}")
                await asyncio.sleep(30)
    
    # D√©marrer le bot et le heartbeat en parall√®le
    try:
        await asyncio.gather(
            bot_main(),
            heartbeat_task()
        )
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Arr√™t demand√© par l'utilisateur")
    except Exception as e:
        logger.error(f"üí• Erreur: {e}")
        health_server.bot_status = "error"
    finally:
        await runner.cleanup()

if __name__ == "__main__":
    asyncio.run(main())